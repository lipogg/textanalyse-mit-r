[["index.html", "Textanalyse mit R für die Geisteswissenschaften Über diesen Kurs", " Textanalyse mit R für die Geisteswissenschaften Lisa Poggel WiSe 2024/25 Freie Universität Berlin Über diesen Kurs Willkommen in meinem Seminar “Textanalyse mit R für die Geisteswissenschaften”! Hier findet ihr die Inhalte zu allen Sitzungen. Dieses Seminar vermittelt grundlegende praktische Kenntnisse der Textanalyse mit der Programmiersprache R. Der Fokus liegt auf der Verarbeitung und Analyse geisteswissenschaftlicher Daten. Das Seminar richtet sich insbesondere an Studierende ohne Programmiererfahrung und vermittelt neben Verfahren der Textanalyse und des Text Mining auch Grundlagen der Programmierung mit R. R kommt als besonders einstiegsfreundliche Programmiersprache vermehrt auch in geisteswissenschaftlichen Forschungsprojekten zur Anwendung, beispielsweise bei der quantitativen Textanalyse, in der digitalen Stilometrie, bei der Autorschaftserkennung oder zur Analyse und Visualisierung historischer Korrespondenznetzwerke. Das Seminar setzt keine Programmiererfahrung voraus. "],["warum-r.html", "Warum R? Was ist R überhaupt? R Thirst Traps", " Warum R? Was ist R überhaupt? R is a language and environment for statistical computing and graphics. Quelle: https://www.r-project.org/about.html Warum sollten Geisteswissenschaftler:innen eine Programmiersprache für “statistical computing” lernen? Kann man damit nicht nur Worthäufigkeiten zählen und Wortwolken erstellen? Und sind Wortwolken nicht irgendwie etwas “underwhelming”? In den letzten Jahren ist R neben Python zur meistgenutzten Programmiersprache im Bereich Data Science geworden. Data Scientists beschäftigen sich natürlich tatsächlich viel mit Statistik. Aber R ist viel mehr als “nur” Statistik. Die Anwendungsmöglichkeiten von R sind genauso vielfältig wie die Digital Humanities selbst. Und das nicht nur, weil die Digital Humanities selbst ein sehr vielseitiges Fach sind, über deren Definition immer noch kontrovers diskutiert wird (siehe zum Beispiel whatisdigitalhumanities.com). R hat eine aktive und riesige Community von Nutzer:innen, die immer neue sogenannte “Pakete” erstellen, die für bestimmte Anwendungen gemacht sind, wie zum Beispiel für die Analyse dramatischer Texte, die Stilometrie oder auch die Textanalyse ganz allgemein. Was man alles so mit R in den Digital Humanities anstellen kann, illustrieren die Beispiele im nächsten Abschnitt. R Thirst Traps Das klingt alles bisher noch sehr abstrakt. Deswegen hier ein paar ganz konkrete Anwendungsbeispiele von R im Bereich der Digital Humanities, die hoffentlich etwas Lust auf R machen: Web App, Geocoding, GIS, Queere Geschichte: https://www.mappingthegayguides.org/map/ Code zum Projekt: https://github.com/MappingtheGayGuides/MGG-App Rezeptionsforschung zu James Baldwin, Literaturgeschichte, Datenvisualisierung: https://tweetsofanativeson.com/Seattle-Public-Library-2023/ Code: https://github.com/JoeLollo21/Viral-Lit-Project Text Reuse und Intertextualität: https://americaspublicbible.org/ , https://americaspublicbible.supdigital.org/verse-viewer/?ref=Proverbs%2022%3A6 Code: https://github.com/lmullen/americas-public-bible Text Reuse in historischen Zeitschriften, Topic Modeling, Text Feature Extraction: https://viraltexts.org/ Code: https://github.com/rccordell/us-newspapers-1689-2009 ; https://github.com/ViralTexts/viral-texts-networks ; https://github.com/jonathandfitzgerald/Viral-Texts-R Topic Modeling: https://layeredlives.org/ Publikation zum Projekt: https://statsmaths.github.io/pdf/2022-layered-lives.pdf Named Entity Recognition und Textannotation: https://photogrammar.org Code: https://github.com/americanpanorama/photogrammar Korrespondenznetzwerk analysieren und visualisieren: https://www.jessesadler.com/project/dvdm-correspondence Code: https://github.com/jessesadler/dvdm-correspondence Quantitative Textanalyse von Shakespeare-Dramen, Datenbeschaffung: https://m-clark.github.io/text-analysis-with-R/shakespeare.html Dramenanalyse, Arbeit mit XML-TEI Dateien: https://quadrama.github.io/DramaAnalysis/tutorial/3/introduction.html Code: https://github.com/quadrama/DramaAnalysis Datenbeschaffung mithilfe von APIs (Codebeispiel): https://github.com/ThomasK81/ExploringDigitalHumanities/blob/master/RScripts/shortstories.R Textklassifikation (Codesammlung): https://github.com/kbenoit/newsmap Quantitative Inhaltsanalyse mit R, Kookkurrenzen von Charakteren in “Sherlock Holmes”: http://inhaltsanalyse-mit-r.de/netzwerke.html Lexikalische Vielfalt und Sentimentanalyse (Codesammlung): https://github.com/louismagowan/lyrics_analysis Lexikalische Ähnlichkeit von Romanen, Computational Linguistics, Stemming Publikation zum Projekt: https://piperlab.mcgill.ca/pdfs/Piper_NovelConversions.pdf Code: https://github.com/nan-da/Novel-Devotions Genreklassifikation, Topic Modeling, soziale Netzwerkanalyse, Part of Speech Tagging, uvm. Publikation: https://press.uchicago.edu/ucp/books/book/chicago/E/bo28465405.html Code: https://github.com/piperandrew/enumerations Computational Linguistics, Named Entity Recognition, Part of Speech Tagging: Publikation: https://amst.winter-verlag.de/article/AMST/2018/2/8 Code: https://github.com/nilsreiter/rereading-the-american-short-story Quantitative Linguistik, Korpuslinguistik: https://jupyter.korpus.cz/shiny/lukes/mda/ Code: https://github.com/dlukes/shiny-mda Digital Humanities Masterarbeit, in der R verwendet wird (Codesammlung): https://github.com/mikkosk/spectator_masters_thesis Noch eine Digital Humanities Masterarbeit (von mir): https://lipogg.shinyapps.io/soviet-ethnography/ Code: https://github.com/lipogg/soviet-ethnography Im Laufe des Semesters werden wir also nicht (nur) Wordclouds erstellen, sondern genuin geistes- bzw. literaturwissenschaftlichen Fragestellungen und Technologien behandeln, die für die geisteswissenschaftliche Arbeit relevant sind. Dabei sollen programmatische Zugriffe auf diese Fragestellungen natürlich traditionelle Analysemethoden nicht ersetzen, sondern diese produktiv ergänzen. "],["seminarplan.html", "Seminarplan", " Seminarplan Sitzung Nr. Datum Thema 1 15.10. Einstieg 2 22.10. R Basics I: Datentypen, Variablen und Operatoren 3 29.10. R Basics II: Datenstrukturen 4 5.11. R Basics III: Kontrollstrukturen 5 12.11. R Basics IV: Funktionen und Pakete 6 19.11. R Basics Wiederholung 7 26.11. Textanalyse mit Quanteda I: Korpus, Tokens, Daten und Dateien 8 3.12. Textanalyse mit Quanteda II: Preprocessing und Reguläre Ausdrücke 9, 10 10. und 17.12. Textanalyse mit Quanteda III: Wortfrequenzanalysen 11 7.1. Part of Speech Tagging und Dependency Parsing mit UDPipe 12 14.1. Textanalyse Wiederholung 13, 14 21.1., 28.1. Named Entity Recognition 15, 16 4.2., 11.2. Arbeit mit XML-TEI Dateien: XML, TEI und XPath Der Seminarplan ist erst einmal vorläufig. Je nach Lerntempo und Interessen werden wir das ein oder andere Thema mehr oder weniger vertiefen. Die Inhalte bauen grundsätzlich aufeinander auf: Zunächst beschäftigen wir uns mit sogenannten “unstrukturierten” Daten und später mit “(semi-)strukturierten” Daten. Nach einem Einstieg in R steigen wir in die Arbeit mit “rohem Text”, also Plaintext-Dateien, als Beispiel für unstrukturierte Daten ein und erarbeiten Grundkonzepte der quantitativen Textanalyse. Dabei werden wir auch diskutieren, was “geisteswissenschaftliche Daten” eigentlich sind. Danach behandeln wir zwei verschiedene Verfahren, wie Texte in R im Hinblick auf bestimmte Textinformationen strukturiert (man sagt auch “annotiert”) werden können: das automatisierte Erkennen von Wortarten (Part of Speech Tagging) und von “Entitäten” wie Personennamen und Ortsnamen (Named Entity Recognition). Zuletzt widmen wir uns XML-TEI-Dateien als Beispiel für die Analyse (semi-)strukturierter Textdaten. XML-TEI ist ein in den Digital Humanities weit verbreiteter Standard zur digitalen Darstellung von Texten, beispielsweise literarsichen Werken, archivalischen Quellen oder wissenschaftlichen Arbeiten. Mithilfe von XML-TEI können Textinformationen, zum Beispiel Metadaten und bestimmte Bestandteile des Textes, strukturiert dargestellt werden. Die vorgestellten Verfahren können wir natürlich in der kurzen Zeit nur sehr, sehr oberflächlich behandeln. Das Ziel ist es, dass ihr am Ende des Semesters Grundkonzepte des Programmierens in R und grundlegende Anwendungen der Programmiersprache im Bereich der Textanalyse kennt und euch die Fertigkeiten erarbeitet habt, fortgeschrittenere Themen eigenständig weiter zu vertiefen. Da wir viele Themen besprechen werden, erfordert dieses Seminar ein hohes Maß an Motivation und Durchhaltevermögen. Jede Woche wird es Übungsaufgaben geben. Die Bearbeitung der Übungsaufgaben ist verpflichtend und insbesondere zur Vor- und Nachbereitung der Einstiegssitzungen essentiell, denn sonst wird es sehr schwierig sein, später mitzukommen. Die Lernkurve ist demenstprechend steil: "],["lernziele.html", "Lernziele", " Lernziele Das Seminar ist als Praxisseminar konzipiert. Das heißt, dass der Fokus darauf liegt, anhand praktischer Übungsaufgaben und Fragestellungen das Coden in R zu erlernen. Das heißt aber nicht, dass wir nur Sachen auswendig lernen und Inhalte von einem Zusammenhang auf den anderen übertragen. Die kritische Analyse und Evaluation nicht nur von Code sondern auch von konkreten Verfahren ist essentiell für die Arbeit mit geisteswissenschaftlichen Daten. Nach diesem Seminar kennt ihr… Grundbegriffe und Konzepte der Programmierung mit R: Die Studierenden kennen den Unterschied zwischen verschiedenen Datentypen und Datenstrukturen und kennen die wichtigsten Operationen darauf. Sie haben ein Grundverständnis von der sinnvollen Strukturierung von R-Code und kennen wichtige Konventionen. Grundbegriffe und Verfahren der Textanalyse und -aufbereitung mit R: Die Studierenden kennen geeignete Verfahren zur Aufbereitung und Analyse von Plaintext-Dateien und XML-TEI-Dateien. Sie können mögliche Probleme, Vor- und Nachteile der verschiedenen Verfahren sowie ausgewählte Anwendungsgebiete der Verfahren benennen. Sie kennen relevante Richtwerte und Metriken zur Bewertung der Analyseergebnisse und haben ein elementares Verständnis der statistischen Grundlagen der angewandten Verfahren. Datenformate: Die Studierenden sind mit dem Aufbau von XML-TEI Dokumenten vertraut. Sie können zwischen verschiedenen Datenformaten unterscheiden. Suchtechniken für verschiedene Datenformate: Die Studierenden kennen die grundlegende Syntax von Regulären Ausdrücken und XPath. Nach diesem Seminar könnt ihr … Verfahren des Preprocessing und der Textanalyse in R anwenden: Die Studierenden können R-Code lesen und (je nach Vorkenntnissen) einfache bis fortgeschrittene Skripte zum Preprocessing und Analyse von Textdaten in R selbst schreiben. Sie können Fehler mithilfe von Debugging-Strategien selbst identifizieren und können Online-Ressourcen nutzen, um sich selbst Hilfe zu beschaffen. Sie können komplexen Code auf dem eigenen Computer reproduzieren. Sie sind routiniert im Umgang mit RStudio. Sie können einfache Ausdrücke zur Suche in Plaintext- und XML-TEI-Dateien mithilfe von Regulären Ausdrücken und XPath schreiben und einsetzen. Auswirkungen der angewandten Verfahren evaluieren: Die Studierenden können evaluieren, wie sich verschiedene Entscheidungen und Verfahren des Preprocessing auf die Analyse eines Textkorpus’ auswirken. Sie können identifizieren, welche Preprocessing-Schritte die Analyseergebnisse verbessern können. Aussagekraft der Ergebnisse kritisch bewerten: Die Studierenden können die Ergebnisse der verschiedenen Analyse-, Such und Extraktionsverfahren im Hinblick auf die Preprocessingentscheidungen, die Qualität und Zusammensetzung des Korpus kritisch bewerten. "],["organisatorisches.html", "Organisatorisches", " Organisatorisches Hier findet ihr Informationen zu Teilnahmemodalitäten, Prüfungsleistungen und Kommunikation. Teilnahmeschein: Aktive Teilnahme: n-2 Sitzungen Wöchentliche Übungsaufgaben: Lösungen Montagabend vor jeder Stunde an mich schicken (l.poggel@fu-berlin.de). Übungen schicke ich euch per Mail jede Woche Mittwoch. Ein Kahoot-Quiz erstellen und moderieren. Login über https://kahoot.com/ Leistungsschein: Wie Teilnahmeschein Zusätzlich ein eigenständiges Projekt (ersetzt die Hausarbeit): Ihr plant und implementiert auf der Grundlage der Inhalte aus diesem Seminar ein kleines Digital Humanities Projekt. Im Laufe der Bearbeitung eurer Fragestellung erstellt ihr ein kleines Programmierportfolio mit allen Skripten, die ihr im Rahmen des Projekts erstellt habt. Das Portfolio sendet ihr als Zip-Ordner bis zum 31.03.2025 an l.poggel@fu-berlin.de. Die Anforderungen, Projektbeispiele und die Bewertungsgrundlage für das Portfolio besprechen wir rechtzeitig im Laufe des Semesters. Kommunikation: Bei Fragen, Kritik oder falls ihr mal eine Sitzung nicht kommen könnt, schreibt mir eine E-Mail an l.poggel@fu-berlin.de. Um eine Sprechstunde zu vereinbaren, könnt ihr mich gern vor oder nach den Sitzungen ansprechen oder mir eine E-Mail schreiben. Bewertungskriterien für das Abschlussprojekt: Umfang: Programmierportfolio, bestehend aus mindestens zwei verschiedenen R Skripten und einem Dokumentationstext, der die Fragestellung, das Korpus, den Forschungsstand und die gewählten Verfahren vorstellt und begründet, sowie die Ergebnisse in Bezug auf die Fragestellung auswertet und kritisch diskutiert. Der Umfang der Dokumentationstextes (exklusive Code) sollte 4-8 Seiten (ca. 1200-3000 Wörter) entsprechen. Abgabefrist: 31.03.2025 Abgabeformat: Programmierportfolio als Zip-Ordner Beispielportfolio: Skript 1: Preprocessing. Vorbereitetes Korpus wird in RDS-Datei gespeichert. Skript 2: Analyse mit quanteda, UDPipe (oder Named Entity Recognition). Das Korpus wird aus der RDS-Datei eingelesen. Dokumentation als RMarkdown-Dokument oder PDF Bewertungsskala: Note Erläuterung 1.0-1.3 Alle formalen Kriterien werden eingehalten. Die Forschungsfrage ist sinnvoll und mithilfe der gewählten Preprocessing- und Analyseverfahren sehr gut beantwortbar. Es gibt dabei unter den im Kurs kennengelernten Verfahren keine besser geeigneten Verfahren zur Beantwortung der Fragestellung. Die Wahl der verwendeten Verfahren, Vor- und Nachteile, die Aussagekraft sowie mögliche Auswirkungen auf die Beantwortung der Fragestellung werden kritisch diskutiert. Die Aussagekraft des Analyseverfahrens wird kritisch diskutiert. Die Ergebnisse werden in Bezug zum aktuellen Forschungsstand gesetzt. Der Code ist ausführlich kommentiert. Fremder Code wird nur dann verwendet, wenn der Code für die Umsetzung von Aufgaben, die über die Inhalte im Seminar hinausgehen, gebraucht wird, oder, wenn der Code eine Verbesserung zu den im Seminar vorgestellten Vorgehen darstellt. Fremder Code wird immer zitiert. Der Code produziert keine Fehlermeldungen und folgt immer gängigen stilistischen Konventionen und Regeln. 1.3-2.3 Alle formalen Kriterien werden eingehalten. Die Fragestellung ist sinnvoll und mithilfe der gewählten Preprocessing- und Analyseverfahren beantwortbar, aber es gibt ein besser geeignetes Verfahren. Die Wahl des Verfahrens wird begründet, aber die Begründung ist nicht gänzlich überzeugend oder weniger wichtige Konsequenzen der Entscheidung werden nicht diskutiert. Die Aussagekraft des Analyseverfahrens wird kritisch diskutiert. Die Ergebnisse werden in Bezug zum aktuellen Forschungsstand gesetzt. Der Code ist ausführlich kommentiert. Fremder Code wird nur dann verwendet, wenn der Code für die Umsetzung von Aufgaben, die über die Inhalte im Seminar hinausgehen, gebraucht wird, oder, wenn der Code eine Verbesserung zu den im Seminar vorgestellten Vorgehen darstellt. Fremder Code wird immer zitiert. Der Code produziert keine Fehlermeldungen und folgt zumeist gängigen stilistischen Konventionen und Regeln. 2.3-3.3 Alle formalen Kriterien werden eingehalten. Die Fragestellung ist sinnvoll und mithilfe der gewählten Preprocessing- und Analyseverfahren beantwortbar, aber es gibt ein besser geeignetes Verfahren. Die Wahl des Verfahrens wird begründet, aber die Begründung ist nicht überzeugend. Der Code ist an den wichtigsten Stellen kommentiert. Fremder Code wird nur dann verwendet, wenn der Code für die Umsetzung von Aufgaben, die über die Inhalte im Seminar hinausgehen, gebraucht wird, oder, wenn der Code eine Verbesserung zu den im Seminar vorgestellten Vorgehen darstellt. Fremder Code wird immer zitiert. Der Code produziert keine Fehlermeldungen. 3.3-4.0 Formale Kriterien werden zumeist eingehalten. Die Fragestellung ist teilweise mithilfe der gewählten Preprocessing- und Analyseverfahren beantwortbar. Die Wahl des Verfahrens wird begründet, aber die Begründung ist nicht überzeugend. Fremder Code wird immer zitiert. Der Code produziert keine Fehlermeldungen. ab 4.0 Formale Kriterien werden zumeist eingehalten. Die Fragestellung ist teilweise mithilfe der gewählten Preprocessing- und Analyseverfahren beantwortbar. Die Wahl des Verfahrens wird nicht begründet. Fremder Code wird immer zitiert. Der Code produziert keine Fehlermeldungen. 5.0 Formale Kriterien werden nicht eingehalten. Der Code ist nicht ausführbar und enthält schwerwiegende Fehler. Die Fragestellung ist nicht sinnvoll gewählt und die gewählten Preprocessing- und Analyseverfahren sind nicht geeignet, um die Fragestellung zu bearbeiten. "],["hilfe.html", "Hilfe!!", " Hilfe!! Oft kommt es beim Coden zu komischen Fehlermeldungen, die mehr verwirren als helfen. Häufig steckt aber ein ganz simpler Flüchtigkeitsfehler dahinter. In diesem Fall gilt: 1. Syntax und Rechtschreibung überprüfen. Fehlt vielleicht nur eine Klammer? Ist die Variable wirklich richtig geschrieben? Sind wirklich alle notwendigen Pakete installiert und geladen? 2. Fehlermeldung kopieren und googeln. Bestimmt hatte schonmal jemand anderes dasselbe Problem und bestenfalls findet sich eine Lösung auf https://stackoverflow.com/ oder in einem anderen Forum. 3. ChatGPT fragen. Das Codesnippet an ChatGPT senden und nach möglichen Fehlern fragen. 4. R Hilfeseiten aufrufen. Mit dem ? und dem ?? Operator können über die Konsole die Dokumentation zu konkreten Funktionen aufgerufen werden. Das kann nützlich sein, um beispielsweise zu überprüfen, welchen Datentyp die Funktion als Input nimmt. Weitere Informationen zu den R Hilfeseiten: https://www.r-project.org/help.html Manchmal macht das Skript aber auch einfach nicht das, was es soll, ohne, dass eine Fehlermeldung entsteht. In diesem Fall liegt wahrscheinlich ein logischer Fehler im Programmablauf vor. Für diesen Fall gibt es eine Strategie, die Rubber Ducking oder Quietscheentchen-Debugging genannt wird. 5. Rubber Ducking oder Quietscheentschen-Debugging. Wenn nichts mehr hilft, hilft nur eins: Den Code einer Person, die nichts davon versteht - oder eben einem Quietscheentchen, Zeile für Zeile erklären. Dabei fallen oft logische Fehler auf, die das Problem verursachen. 6. Hilfe holen. Falls ihr im Laufe des Seminars ein Problem habt, das ihr selbst nicht lösen könnt, könnt ihr einen Screenshot für die nächste Sitzung mitbringen oder mir eine E-Mail an l.poggel@fu-berlin.de schreiben. Falls die Konsole (Fenster Console im RStudio) plötzlich + statt &gt; anzeigt oder sich ein Prozess durch Klick auf das rote “Stop”-Symbol nicht abbrechen lässt: Tastenkombination Ctrl (Control) + C (bzw. Strg + C). Zuletzt kann es natürlich auch vorkommen, dass euch ein Inhalt aus dem Seminar nicht ganz klar ist oder ihr ein weiterführendes Interesse an einem Thema habt. Zum Nachlesen empfehle ich die folgenden Lehrbücher und Ressourcen: Allgemein: Offizielle R Handbücher: https://cran.r-project.org/manuals.html Wickham, Hadley, Çetinkaya-Rundel, Mine und Grolemund, Garrett (2023). R for Data Science (=Official Tidyverse Book): https://r4ds.hadley.nz/ Schmidt, Ben (ongoing). Humanities Data Fundamentals: https://hdf.benschmidt.org/R/ Van Atteveldt, Wouter, Trilling, Damian und Arcila Calderón, Carlos (2022). Computational Analysis of Communication: https://cssbook.net/ Stoltz, Dustin S. und Taylor, Marshall A. (2024). Mapping Texts. Computational Text Analysis for the Social Sciences, https://global.oup.com/academic/product/mapping-texts-9780197756881 Sammlung von R “Cheatsheets”: https://github.com/rstudio/cheatsheets/tree/main Lehrbuch-Klassiker (für Grundlagen, bei speziellen Anwendungen zum Teil nicht mehr aktuell): Arnold, Taylor und Tilton, Lauren (2024). Humanities Data in R. Exploring Networks, Geospatial Data, Images, and Text: https://doi.org/10.1007/978-3-031-62566-4 Jockers, Matthew und Thalken, Rosamond (2020). Text Analysis with R for Students of Literature: https://doi.org/10.1007/978-3-030-39643-5 Desagulier, Guillaume (2017). Corpus Linguistics and Statistics with R: https://doi.org/10.1007/978-3-319-64572-8 Levshina, Natalia (2015). How to Do Linguistics with R: https://doi.org/10.1075/z.195 Textanalyse mit Quanteda: Offizielle Quanteda-Dokumentationsseiten: https://quanteda.io/ Offizielles Quanteda-Tutorial: https://tutorials.quanteda.io/ Replikation des Codes aus Levshinas “Text Analysis with R for Students of Literature” mithilfe von Quanteda: https://quanteda.io/articles/pkgdown/replication/digital-humanities.html Video-Tutorial zu Preprocessing und Textanalyse mit R von Kasper Welbers: https://www.youtube.com/playlist?list=PL-i7GM-A1wBZYRYTpem7hNVHK3hSV_1It Kapitel 10: “Text as Data” aus “Computational Analysis of Communication”: https://cssbook.net/content/chapter10.html Kapitel 6: “From Text to Numbers” aus “Mapping Texts”: https://global.oup.com/academic/product/mapping-texts-9780197756881 Datenvisualisierung mit ggplot2: Healy, Kieran (2019). Data Visualization. A Practical Introduction, https://socviz.co/ Wickham, Hadley (2016). ggplot2. Elegant Graphics for Data Analysis, https://ggplot2-book.org/ ggplot2-Dokumentationsseiten: https://ggplot2.tidyverse.org/; https://ggplot2.tidyverse.org/articles/ggplot2.html Statistik: (grundlegend) Handl, Andreas und Kuhlenkasper, Torben (2018). Einführung in die Statistik. Theorie und Praxis mit R: https://doi.org/10.1007/978-3-662-56440-0 (grundlegend) Gries, Stefan (2021). Statistics for Linguistics with R: https://doi.org/10.1515/9783110718256 (grundlegend) Blitzstein, Joe. Vorlesungsvideos, interaktiver Kurs und Buch Statistics 110: Probability, https://projects.iq.harvard.edu/stat110/home (fortgeschritten) Kroonenberg, Pieter (2021). Multivariate Humanities: https://doi.org/10.1007/978-3-030-69150-9 (fortgeschritten) Handl, Andreas und Kuhlenkasper, Torben (2017). Multivariate Analysemethoden. Theorie und Praxis mit R: https://doi.org/10.1007/978-3-662-54754-0 Hintergrund Preprocessing und Natural Language Processing (POS Tagging, Dependency Parsing, NER,…): Jurafsky, Daniel und Martin, James H. (2023). Speech and Language Processing, https://web.stanford.edu/~jurafsky/slp3/ (insbesondere Kapitel 2, 8, 17, 18). Grimmer, Justin, Roberts, Margaret E. und Stewart, Brandon M. (2022), Text as Data. A New Framework for Machine Learning and the Social Sciences, https://fu-berlin.primo.exlibrisgroup.com/permalink/49KOBV_FUB/1v1tp5h/alma9960725495502883 Biemann, Chris, Heyer, Gerhard und Quasthoff, Uwe (2013). Wissensrohstoff Text. Eine Einführung in das Text Mining, https://doi.org/10.1007/978-3-658-35969-0 (insbesondere Kapitel 1, 2). Theorie (wird fortlaufend ergänzt): Gius, Evelyn und Jacke, Janina (2022). Are Computational Literary Studies Structuralist?, in: Journal of Cultural Analytics 7, no. 4, https://doi.org/10.22148/001c.46662. (Woche 1) Pichler, Axel und Reiter, Nils (2021), Zur Operationalisierung literaturwissenschaftlicher Begriffe in der algorithmischen Textanalyse, in: Journal of Literary Theory 15, no. 1-2, https://doi.org/10.1515/jlt-2021-2008. (W1) Bhattacharyya, Sayan (2021). Text Analysis for Thought in the Black Atlantic, in: Kelly Baker Josephs und Roopika Risam, The Digital Black Atlantic, pp. 77-83, https://muse.jhu.edu/book/84470. (W1) Stoltz, Dustin und Taylor, Marshall (2024). Mapping Texts. S. XIII und Ch. 1: Text in Context, https://doi.org/10.1093/oso/9780197756874.001.0001. (W1) Pichler, Axel und Reiter, Nils (2022). From Concepts to Texts and Back: Operationalization as a Core Activity of Digital Humanities, https://culturalanalytics.org/article/57195 Risam, Roopika (2019). New Digital Worlds. Postcolonial Digital Humanities in Theory, Praxis, and Pedagogy. Ch. 1: The Stakes of Postcolonial Digital Humanities (insb. Abschnitt World Making in Digital Humanities), https://fu-berlin.primo.exlibrisgroup.com/permalink/49KOBV_FUB/1v1tp5h/alma9961448530002883. Bubenhofer, Noah und Scharloth, Joachim (2013). Korpuslinguistische Diskursanalyse, in: Ulrike Hanna Meinhof, Martin Reisigl und Ingo Warnke (Hrsg.), Diskurslinguistik im Spannungsfeld von Deskription und Kritik, S. 147-167. https://doi.org/10.1524/9783050061047.147 Bode, Katherine (2017), The Equivalence of “Close” and “Distant” Reading; or, Toward a New Object for Data-Rich Literary History, https://doi.org/10.1215/00267929-3699787. Kleymann, Rabea (2022). Datendiffraktion: Von Mixed zu Entangled Methods in den Digital Humanities, https://doi.org/10.17175/sb005_008. Eve, Martin Paul (2022). The Digital Humanities and Literary Studies. Introduction, https://doi.org/10.1093/oso/9780198850489.003.0001 (für Skeptiker:innen) Bond, Sarah, Long, Hoyt und Underwood, Ted (2017). ‘Digital’ Is Not the Opposite of ‘Humanities’, https://www.chronicle.com/article/digital-is-not-the-opposite-of-humanities/. (für Skeptiker:innen) Glossar der Zeitschrift für digitale Geisteswissenschaften (mit Beiträgen zu Theorie, Operationalisierung, Daten, …): https://zfdg.de/wp_2023_001. Einige Digital Humanities Zeitschriften (für die eigene Recherche): Zeitschrift für digitale Geisteswissenschaften, https://zfdg.de/ Digital Humanities Quarterly, https://www.digitalhumanities.org/dhq/ Journal of Cultural Analytics, https://culturalanalytics.org/ Journal of Computational Literary Studies, https://jcls.io/ Journal of Digital History, https://journalofdigitalhistory.org/ "],["installation-und-setup.html", "Installation und Setup", " Installation und Setup Egal, welches Betriebssystem: Erst R installieren, dann RStudio! R installieren (Mac: Intel oder Silicon!) https://cran.r-project.org/ Mac: Zusätzlich XQuartz installieren: https://www.xquartz.org/ RStudio installieren (RStudio ist jetzt Posit): https://posit.co/download/rstudio-desktop/ Wenn alles installiert ist, öffnet RStudio. "],["orientierung-im-rstudio.html", "Orientierung im RStudio", " Orientierung im RStudio "],["r-basics-i-datentypen-variablen-und-operatoren.html", "1 R Basics I: Datentypen, Variablen und Operatoren 1.1 Grundlegende Begriffe 1.2 Style Guide 1.3 Kommentare 1.4 Datentypen 1.5 Operatoren 1.6 Variablen 1.7 Operatorpräzedenz Quellen", " 1 R Basics I: Datentypen, Variablen und Operatoren 1.1 Grundlegende Begriffe Begriff Englische Entsprechung Definition (im R-Kontext) Objekt Object Alles: Funktionen, Variablen, Datenstrukturen,.. Anweisung Statement Syntaktische Einheit, die Aktionen beschreibt, die von einem Computer ausgeführt werden können. Wenn die Anweisung ausgeführt wird, wird die Aktion veranlasst und der Zustand des Speichers wird geändert. Zuweisung Assignment Besondere Art von Anweisung, bei der einer Variable ein bestimmter Wert zugeordnet wird. Dabei wird ein Name festgelegt, der fortan für diesen Wert und für den Speicherplatz, in dem der Wert gespeichert wird, steht. Ausdruck Expression Syntaktische Einheit, die zu einem Wert evaluiert (ausgewertet) werden kann. Ein Ausdruck ist immer Teil einer Anweisung. Ausdrücke stehen auf der rechten Seite von Zuweisungen: x &lt;- Ausdruck. Ausdrücke haben immer einen Typ, der dem Datentyp des Werts entspricht, zu dem sie evaluiert werden, z.B. 3 == 4 ist ein Ausdruck vom Typ boolean. Aussage Proposition In der Aussagenlogik ein sprachliches Gebilde, von dem es sinnvoll ist zu sagen, dass es entweder wahr oder falsch ist (Aristoteles). Im R-Kontext ein Ausdruck, der entweder zu TRUE oder zu FALSE evaluiert werden kann. Auswerten Evaluate Der Computer liest einen Ausdruck und wertet diesen aus: Er berechnet etwas und liefert einen Wert. Ausführen Execute Der Computer liest eine Anweisung und führt diese aus: Er macht etwas und ändert den Zustand des Speichers. Ausgeben Output/Print Das Ergebnis einer Berechnung oder die Ausgabe einer Funktion wird auf der Konsole angezeigt. Die Definitionen sind angelehnt an Venables et al. (2023), Wickham (2019) und Reussner (2016). 1.2 Style Guide Anders als beispielsweise in Python gibt es in R keinen allgemein anerkannten “Coding Style”, also keine über die Syntaxregeln hinausgehenden Vorgaben, wie Code am besten geschrieben wird. Es gibt allerdings einige breit akzeptierte Empfehlungen. Wir richten uns in diesem Kurs nach dem “Tidyverse Style Guide” von Hadley Wickham: https://style.tidyverse.org/. 1.3 Kommentare Um den eigenen Code für andere verständlicher zu gestalten und sich selbst an seinen Code zu erinnern, sollte man diesen immer gut kommentieren. # Das ist ein Kommentar 1.4 Datentypen In R ist ganz grundsätzlich alles ein Objekt: ein Wort, eine Zahl, ein Vektor, eine Liste, eine Variable und sogar Funktionen (lernen wir alles später), all das wird in R als Objekt behandelt. Wie auch in der realen Welt haben verschiedene Objekte verschiedene Eigenschaften und sie können für verschiedene Zwecke und auf verschiedene Weise verwendet werden. Das hängt davon ab, um was für eine Art Objekt es sich handelt: ein Objekt vom Typ “Lampe” kann man anschalten und ausschalten, mathematische Objekte wie Zahlen kann man addieren und dividieren, ein Auto kann fahren, parken oder tanken. In R haben wir es natürlich nicht mit realen Objekten zu tun, sondern eigentlich mit “Datenobjekten”. In R gibt es vier grundlegende Datentypen (und zwei, die wir jetzt erstmal ignorieren): character (auch “character string”): Zeichenkette integer: Ganzzahl numeric (auch “double”): Gleitkommazahl logical (auch “boolean”): Boolescher Wahrheitswert Character ist kurz für “character string”; in anderen Programmiersprachen heißt dieser Datentyp daher oft “string”. In R wird jeder Ausdruck, der von Anführungszeichen umgeben ist, als Zeichenkette (character) interpretiert. Double ist, ähnlich wie bei character und string, der allgemeine Name für den Datentyp numeric. Der Default-Datentyp für Zahlen ist in R numeric. Um eine Zahl als Integer zu definieren, kann ein großes L an die Zahl angefügt werden. Logical steht für die beiden Werte TRUE und FALSE. Sie werden auch als Boolesche Wahrheitswerte bezeichnet (-&gt; kennt ihr ggf. aus der Aussagenlogik). Für “Datentyp” kann man auch kurz “Typ” sagen. Ein paar Beispiele: 2 2L 345682389 4.6 # Punkt statt Komma! &quot;4.6&quot; TRUE FALSE &quot;Hello World&quot; # Anführungszeichen! &quot;Ein ganz langer Satz! Mit mehreren Satzzeichen. Und einer Zahl: 34.&quot; &quot; &quot; Den Datentyp eines Objekts könnt ihr z.B. mit der Funktion typeof() abfragen. Wenn ihr jede Zeile nacheinander in ein R Skript kopiert und ausführt, wird auf der Konsole (Fenster Console im RStudio) der Wert ausgegeben, der hier von #&gt; angeführt wird. typeof(2) #&gt; [1] &quot;double&quot; typeof(2L) #&gt; [1] &quot;integer&quot; typeof(4.6) #&gt; [1] &quot;double&quot; typeof(&quot;Hello World&quot;) #&gt; [1] &quot;character&quot; typeof(TRUE) #&gt; [1] &quot;logical&quot; Verständnisfragen: Ist ” ” auch ein Zeichen? Haben 4.6 und “4.6” denselben Datentyp? Welchen Datentyp hat der Satz “Ein ganz langer Satz! …”? Style Tip: Für Zeichenketten können einfache oder doppelte Anführungszeichen verwendet werden. Wickham empfiehlt, für Zeichenketten doppelte Anführungszeichen zu verwenden, außer, wenn diese selbst Anführungszeichen beinhalten, hier werden beide Anführungszeichen wie folgt kombiniert: ‘Text mit “Anführungszeichen”’. 1.5 Operatoren Je nachdem, welchen Datentyp ein oder mehrere Objekte in R haben, können diese Objekte auf verschiedene Weise mithilfe von Operatoren manipuliert werden. Arithmetische Operatoren sind aus der Schulmathematik bekannt. Es handelt sich dabei um Operatoren wie -, +, *, / sowie %% und %/%. Beachtet, dass der Divisionsoperator / nur für numerics definiert ist. Für die Division zweier integers wird ein spezieller Divisionsoperator, %/%, verwendet. %% ist der modulo Operator, damit kann bei einer Division der Rest berechnet werden. ^ oder ** wird zum Exponieren verwendet. 5 + 4 #&gt; [1] 9 10 / 5 #&gt; [1] 2 3 * 6.3 #&gt; [1] 18.9 10 %% 5 #&gt; [1] 0 10^2 #&gt; [1] 100 10**2 #&gt; [1] 100 Verständnisfragen: Was passiert, wenn wir \"Hallo\" + \"Welt\" ausführen? Welche Datentypen in R erlauben arithmetische Operationen? Logische Operatoren ermöglichen es, Werte zu vergleichen und die Richtigkeit einer logischen Aussage zu überpüfen. Die Vergleichsoperatoren &lt;, &gt;, &lt;=, &gt;= sind allgemein bekannt. Außerdem sind folgende Operatoren wichtig: Operator Bedeutung == genau gleich != ungleich !x nicht x x ⎮ y x oder y x &amp; y x und y x ⎮⎮ y x oder y in Kontrollstrukturen x &amp;&amp; y x und y Kontrollstrukturen Beispiele: -5 &lt; -10 #&gt; [1] FALSE 5 &gt;= 5 #&gt; [1] TRUE 3 != 5 #&gt; [1] TRUE &quot;Hallo&quot; != &quot;Hello&quot; #&gt; [1] TRUE 3 == 3 &amp; &quot;c&quot; == &quot;c&quot; #&gt; [1] TRUE 3 == 3 | &quot;c&quot; == &quot;a&quot; #&gt; [1] TRUE &quot;Eine Rose ist eine Pflanze&quot; == &quot;Eine Rose ist keine Pflanze&quot; #&gt; [1] FALSE Verständnisfragen: Warum wird der Ausdruck 3 == 3 &amp; \"c\" == \"c\" zu TRUE evaluiert? Warum wird auch der Ausdruck 3 == 3 | \"c\" == \"a\" zu TRUE evaluiert? Was passiert im letzten Beispiel? Der Wahrheitswert, zu dem ein Ausdruck mit einem logischen Operator in R evaluiert wird, lässt sich aus einer sogenannten Wahrheitstabelle ablesen. Für zwei Ausdrücke A und B und die logischen Operatoren &amp; und | lassen sich die folgenden Kombinationen als Wahrheitstabelle darstellen: Verständnisfragen: A sei der Ausdruck 3 == 3 &amp; \"c\" == \"c\" und B sei der Ausdruck -5 &lt; -10. Ist A &amp; B wahr oder falsch? Ist A | B wahr oder falsch? In Kontrollstrukturen (lernen wir noch) werden anstelle von &amp; und | die beiden Operatoren &amp;&amp; und || verwendet. Das hat den Grund, dass die Objekte in einem Ausdruck mit &amp;und | bei “elementweise” ausgewertet werden. Bei der Auswertung von Ausdrücken mit &amp;&amp; und || wird dagegen nur das erste Element ausgewertet. Dieses Verhalten heißt deswegen auch “lazy evaluation”. Das Verhalten ist bei einfachen Ausdrücken nicht bemerkbar, aber es wird relevant, wenn die Operatoren auf Datenstrukturen anstelle von einzelnen Werten wie bisher angewendet werden. Für die beiden Operatoren &amp;&amp; und || sind die Wahrheitstabellen also nur dann zu den Wahrheitstabellen der Operatoren &amp; und | analog, wenn einzelne Werte verglichen werden. Darauf werden wir in der kommenden Stunde noch einmal zurückkommen, wenn wir Objekte kennengelernt haben, die aus mehreren Elementen bestehen. Im nächsten Abschnitt werden wir einen weiteren Operator kennenlernen, den sogenannten Zuweisungsoperator &lt;- bzw. =. Daneben gibt es die Zugriffsoperatoren [], [[]], [:] und $, mit denen Operationen auf Datenstrukturen ausgeführt werden können. Diese Operatoren lernen wir in der nächsten Stunde kennen, wenn wir uns mit Datenstrukturen beschäftigen. 1.6 Variablen Angenommen, wir wollen den Wert, der ausgegeben wird, wenn der Ausdruck 3 == 3 &amp; \"c\" == \"c\" evaluiert wird, im Programmverlauf noch einmal verwenden. Dann wäre es unpraktisch, wenn wir jedes Mal den gesamten Ausdruck kopieren müssten. Wenn wir später die 3 durch eine 4 ersetzen, müssten wir dann alle Stellen finden, wo derselbe Ausdruck vorkommt, und überall die Änderung vornehmen. So entstehen schnell Fehler. Aus diesem Grund gibt es Variablen. Variablen ermöglichen, einen bestimmten Wert im Verlauf des Programms mehrmals zu verwenden, ohne ihn jedes Mal neu berechnen oder eingeben zu müssen. Werte können mithilfe der Zuweisungsoperatoren &lt;- und = einer Variable “zugewiesen” werden. Das heißt, dass ein Name festgelegt wird, der fortan für diesen Wert und für den Speicherplatz, in dem der Wert gespeichert wird, steht. Man kann alternativ auch sagen, dass ein Wert “an einen Namen gebunden” wird, oder andersherum, dass der Name einen bestimmten Wert “referenziert”. Eine Zuweisung folgt in R dem Schema Name &lt;- Wert. So kann mithilfe des Variablennamens auf den damit verknüpften Wert zugegriffen werden, selbst dann, wenn sich der Wert im Programmverlauf verändert hat. Variablen sind also sowas wie Platzhalter für Werte eines Datentyps. Bei der Benennung von Variablen sollten bestimmte Regeln und die Konventionen aus unserem Style Guide eingehalten werden: Variablennamen dürfen kein Leerzeichen enthalten (Regel!). Variablennamen dürfen keine Sonderzeichen außer Punkte und Unterstriche enthalten (Regel!). Zwei Wörter oder ein Wort und eine Zahl können mit Unterstrich, Punkt, oder camelCase getrennt werden. Wickhams Empfehlung ist hier die Verwendung des Unterstrichs. Variablen dürfen nicht mit einer Zahl oder einem Unterstrich anfangen (Regel!). R ist “case sensitive”, das heißt: die Variable baum ist nicht dasselbe wie die Variable Baum! Wickham empfiehlt, alle Variablennamen klein zu schreiben. Mit dem Zuweisungsoperator &lt;- bzw. = kann ein Wert einem Namen zugewiesen werden. &lt;- und = sind gleichbedeutend; Wickham empfiehlt aber die Verwendung des Operators &lt;-. Beim Ausführen einer Zuweisung wird nichts auf dem Bildschirm (auf der Rstudio Konsole) ausgegeben. Nach der Zuweisung können Werte, die einer Variable zugeordnet sind, mithilfe der Funktion print() auf dem Bildschirm ausgegeben werden. Alternativ kann auch einfach der Variablennamen erneut eingegeben und ausgeführt werden. # Zuweisungen zahl &lt;- 454 satz &lt;- &quot;Eine Rose ist eine Pflanze&quot; satz_2 &lt;- &quot;Eine zweite Rose ist auch eine Pflanze&quot; noch_ein_satz &lt;- &quot;Noch eine Rose&quot; Satz &lt;- &quot;Eine Rose ist keine Pflanze&quot; # Variable Satz auf dem Bildschirm ausgeben print(Satz) #&gt; [1] &quot;Eine Rose ist keine Pflanze&quot; # Variable satz auf dem Bildschirm ausgeben print(satz) #&gt; [1] &quot;Eine Rose ist eine Pflanze&quot; # Variable satz ohne die print()-Funktion auf dem Bildschirm ausgeben satz #&gt; [1] &quot;Eine Rose ist eine Pflanze&quot; # Der Variable satz einen neuen Wert zuweisen satz &lt;- &quot;Ein Apfel ist keine Pflanze&quot; # Variable satz erneut ausgeben print(satz) #&gt; [1] &quot;Ein Apfel ist keine Pflanze&quot; # hier werden die Variablen satz und Satz aus dem Beispiel oben verglichen satz == Satz #&gt; [1] FALSE Verständnisfragen: Welchen Datentyp hat die Variable zahl? Warum wird das erste Mal, dass die Anweisung print(satz) ausgeführt wird, ein anderer Wert ausgegeben, als beim zweiten Mal? Warum wird der Ausdruck satz == Satz zu FALSE evaluiert? Warum ist es nicht korrekt zu sagen, dass bei der Zuweisung ein Wert in einer Variable gespeichert wird? Wie könn die Ausdrücke 1 &gt; 2 &amp; 1 &lt; 4, 1 &gt; 2 | 1 &lt; 4 und (1 &lt; 4) == \"Hund\" mithilfe von Variablen so umgeschrieben werden, dass sich die Zahl 1 nicht wiederholt? Was passiert, wenn der Code 23 -&gt; zahl ausgeführt wird? Nicht nur einzelne Werte können Variablen zugewiesen werden, sondern auch ganze Ausdrücke. In der nächsten Stunde werden wir außerdem sehen, dass auch Datenstrukturen Variablen zugewiesen werden können. # Ausdrücke als Variablen aussage_1 &lt;- &quot;c&quot; == &quot;c&quot; aussage_2 &lt;- 3 == 5 aussage_1 == !aussage_2 #&gt; [1] TRUE Verständnisfragen: Was passiert in diesem Beispiel? Welcher Wert wird den Variablen aussage_1 und aussage_2 zugewiesen? Gut zu wissen: Eine Zuweisung ist eine Art von Anweisung: Sie beschreibt eine bestimmte Aktion, die vom Computer ausgeführt wird und die den Zustand des Speichers ändert. Deswegen sagt man, dass Anweisungen ausgeführt werden, während Ausdrücke ausgewertet werden. 1.7 Operatorpräzedenz Wir haben bereits einige Beispiele für Ausdrücke kennengelernt, die mehrere Operatoren beinhalten. Wie auch bei arithmetischen Operatoren gibt es bei allen anderen Operatoren eine festgelegte Reihenfolge, in der diese Operatoren ausgewertet werden, wenn sie im selben Ausdruck vorkommen und sich einen Operanden teilen. Für die bisher bekannten Operatoren gilt die folgende Rangfolge: Rang Operator 1 () 2 $ 3 [], [[]] 4 ^ 5 [:] 6 *, / 7 +, - 8 &lt;, &gt;, &lt;=, &gt;=, ==, != 9 ! 10 &amp;, &amp;&amp; 11 ⎮, ⎮⎮ 12 &lt;-, = Wenn diese Auswertungsreihenfolge geändert werden soll, müssen runde Klammern verwendet werden. Beispiele: 4 + 10 &gt; 3 + 5 * 2 #&gt; [1] TRUE 4 + 10 &gt; (3 + 5) * 2 #&gt; [1] FALSE FALSE &amp; TRUE == FALSE #&gt; [1] FALSE (FALSE &amp; TRUE) == FALSE #&gt; [1] TRUE Wenn zwei Operatoren in einem Ausdruck denselben Rang haben und einen Operanden teilen, wird der Ausdruck nach der sogenannten Assoziativität der Operatoren ausgewertet: wenn ein Operator linksassoziativ ist, dann heißt dass, dass ein Ausdruck von links nach rechts ausgewertet wird. Wenn ein Operator rechtsassoziativ ist, wird ein Ausdruck von rechts nach links ausgewertet. In R sind fast alle Operatoren linksassoziativ; nur der Potenzierungsoperator und der Zuweisungsoperartor sind rechtsassoziativ. Linksassoziatitvität: ((4+5)+6)+1 = (9+6)+1 = 15+1 = 16 Rechtsassoziativität: 3**(4**5) = 3**1024 = eine sehr lange Zahl Quellen Venables, W.N. and Smith, D.M. and the R Core Team (2023). An Introduction to R, https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf Wickham, Hadley. The Tidyverse Style Guide, https://style.tidyverse.org/ Wickham, Hadley (2019). Advanced R. Chapter 2: Names and Values, https://adv-r.hadley.nz/names-values.html Reussner, Ralf H. Mitschnitt zur Vorlesung “Programmieren” im WiSe 2015/2016. 02: Typen und Variablen, https://www.youtube.com/watch?v=POe41EL2EgU R 4.3.0 Documentation. Operator Syntax and Precedence, https://stat.ethz.ch/R-manual/R-devel/library/base/html/Syntax.html Wickham, Hadley (2019). Advanced R. Chapter 4: Subsetting, https://adv-r.hadley.nz/subsetting.html "],["r-basics-ii-datenstrukturen.html", "2 R Basics II: Datenstrukturen 2.1 Grundlegende Begriffe 2.2 Vektoren 2.3 Listen 2.4 Auf einen Blick: Vektoren vs benannte Vektoren vs Faktoren vs Listen 2.5 Matrizen 2.6 Arrays 2.7 Dataframes 2.8 Auf einen Blick: Matrizen vs Arrays vs Dataframes 2.9 Datenstrukturen untersuchen 2.10 Fehlende und ungültige Werte in Datenstrukturen 2.11 Der Mitgliedschaftsoperator %in% 2.12 Unveränderbarkeit von Objekten in R Quellen", " 2 R Basics II: Datenstrukturen Bisher haben wir Variablen als Platzhalter für Werte vom Typ character, integer, numeric oder logical genutzt. Variablen können aber auch Platzhalter für strukturierte Sammlungen von Werten sein. Datenstrukturen können anstelle von einfachen Werten auch selbst wieder Datenstrukturen enthalten. Die verschiedenen Weisen, wie Daten in R organisiert und im Speicher repräsentiert werden können, werden Datenstrukturen genannt. Solche Datenstrukturen können entweder nur Elemente vom selben Typ aufnehmen (wie z.B. Vektoren und Matrizen), oder Elemente unterschiedlichen Typs (wie z.B. Listen und Dataframes). Wir werden in diesem Kapitel alle wichtigsten Datenstrukturen besprechen. In der Praxis werden wir aber vor allem mit Vektoren und Dataframes arbeiten. 2.1 Grundlegende Begriffe Begriff Englische Entsprechung Definition (im R-Kontext) Element Element Wert oder anderes Objekt innnerhalb einer Datenstruktur. Datenstrukturen können selbst Elemente einer anderen Datenstruktur sein. Elemente haben einen Index und manchmal zusätzlich einen Namen (oder ‘Schlüssel’), über den auf das Element zugegriffen werden kann. Index Index Position eines Elements innerhalb einer Datenstruktur. Ein Index ist in R immer eine Zahl &gt;= 1. Indexierung Indexing Überbegriff für verschiedene Operationen, mit denen auf Elemente in einer Datenstruktur zugegriffen werden kann. Zugreifen Access Operation, bei der durch den Einsatz spezifischer Operatoren Elemente einer Datenstruktur ausgewählt, diese extrahiert oder modifiziert werden können. Vektorisierung Vectorization Mechanismus, bei dem Funktionen oder Operationen automatisch auf alle Elemente eines Vektors angewandt werden, statt auf einzelne Elemente. Dimension Dimension In Bezug auf Matrizen die Anzahl von Zeilen und Spalten (angegeben als Zeilen x Spalten). In Bezug auf Arrays allgemein die Anzahl der verschiedenen ‘Richtungen’, in denen Daten organisiert sind. Bei einem Array können das nicht nur Zeilen und Spalten sein, sondern auch ‘Schichten’ von Matrizen und andere Organisationsweisen. 2.2 Vektoren Eigentlich haben wir in der letzten Stunde schon Vektoren kennengelernt. Denn in R ist jeder einzelne Wert zugleich ein Vektor der Länge 1. Vektoren sind nämlich im Grunde Sequenzen verschiedener Werte desselben Datentyps. Die Werte innerhalb eines Vektors werden Elemente genannt. Die Elemente in einem Vektor haben eine festgelegte Reihenfolge. Jedes Element in einem Vektor hat deswegen eine Position (auch “Index” genannt) zwischen 1 und n, wobei n eine beliebige ganze Zahl &gt; 1 ist. Über den Index kann auf jedes Element einzeln zugegriffen werden oder es können mehrere Elemente gleichzeitig ausgewählt werden. Der Zugriff auf Elemente des Vektors erfolgt mithilfe von eckigen Klammern und wird im Abschnitt 2.2.4 erläutert. 2.2.1 Vektoren erstellen Vektoren können mithilfe von bestimmten Funktionen (lernen wir noch) erstellt werden. Wenn bei der Erstellung bekannt ist, welchen Datentyp die Elemente haben sollen, können die Funktionen character() oder numeric() zur Erstellung verwendet werden. Im Regelfall ist aber die Anzahl der Elemente und/oder deren Datentyp bei der Erstellung noch nicht bekannt. In diesem Fall wird zur Erstellung eines leeren Vektors die Funktion c() verwendet: # leeren Vektor erstellen, ohne einen bestimmten Datentyp festzulegen c() #&gt; NULL Wenn ein leerer Vektor erstellt wird, wird dieser mithilfe des Werts NULL repräsentiert. Darauf kommen wir am Ende der Sitzung noch einmal zurück. Mithilfe der Funktion c() können auch Vektoren aus bereits bekannten Elementen erstellt werden: # Vektor aus einer Zahlsequenz erstellen zahlen &lt;- 1:3 print(zahlen) #&gt; [1] 1 2 3 # Vektoren mit selbst gewählten Elementen erstellen leckere_fruechte &lt;- c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;) coole_zahlen &lt;- c(45, 7, 420) Vektoren können auch durch Zusammenfügen zweier bestehender Vektoren erstellt werden. Wenn die Funktion c() auf zwei Vektoren oder einen Vektor und ein Element angewandt wird, dann werden die beiden Vektoren in der angegebenen Reihenfolge in einen neuen Vektor kombiniert: # Vektoren kombinieren mithilfe der Funktion c() fruechte_und_zahlen &lt;- c(leckere_fruechte, coole_zahlen) # Vektor auf dem Bildschirm ausgeben print(fruechte_und_zahlen) #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Erdbeere&quot; &quot;45&quot; &quot;7&quot; &quot;420&quot; Achtung: Bei der Erstellung von Vektoren muss beachtet werden, dass der Typ der Elemente automatisch vereinhetilicht wird, wenn Elemente mit unterschiedlichen Datentypen in einen Vektor kombiniert werden: vec &lt;- c(&quot;hallo&quot;, &quot;1&quot;) vec &lt;- c(vec, 3) # double wird zu character typeof(vec) #&gt; [1] &quot;character&quot; # bool wird zu double vec &lt;- c(3, TRUE) typeof(vec) #&gt; [1] &quot;double&quot; Nur, wenn ein Element des Vektors eine Liste ist, gilt dieses Prinzip nicht. Darauf kommen wir im Abschnitt “Listen” noch einmal zurück. Während es jeden Index nur einmal gibt, können sich die Werte in einem Vektor wiederholen: fruechte &lt;- c(&quot;Apfel&quot;, &quot;Apfel&quot;, &quot;Orange&quot;) In diesem Vektor gibt es den Wert “Apfel” zwar zweimal, aber die Werte haben verschiedene Indexpositionen (1 bzw. 2). 2.2.2 Sets (Mengen) In anderen Programmiersprachen (bspw. Python) gibt es eine Datenstruktur, die oft Set (Menge) genannt wird. Sets (Mengen) sind dadurch ausgezeichnet, dass alle Werte einzigartig sind. In R gibt es keine eigenständige Datenstruktur für Mengen. Dennoch ist es möglich und oft nützlich, in R mit Sammlungen von einzigartigen Werten zu arbeiten und Mengenoperationen durchzuführen. In R können Mengen aus Vektoren erstellt werden, indem die einzigartigen Werte eines Vektors oder mehrerer Vektoren extrahiert werden: # Einzigartige Werte eines Vektors ausgeben lassen unique(c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;)) #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Erdbeere&quot; # Vereinigung von zwei Vektoren: union(c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;), c(&quot;Kiwi&quot;, &quot;Grapefruit&quot;)) #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Erdbeere&quot; &quot;Kiwi&quot; &quot;Grapefruit&quot; # Schnittmenge von zwei Vektoren: intersect(c(&quot;Apfel&quot;, &quot;Banane&quot;), c(&quot;Erdbeere&quot;, &quot;Apfel&quot;)) #&gt; [1] &quot;Apfel&quot; # Differenz zwischen zwei Vektoren: Elemente erhalten, die im ersten Vektor, aber nicht im zweiten Vektor vorkommen. setdiff(c(&quot;Apfel&quot;, &quot;Banane&quot;), c(&quot;Erdbeere&quot;, &quot;Apfel&quot;)) #&gt; [1] &quot;Banane&quot; 2.2.3 Named Vectors Neben den “einfachen” Vektoren gibt es noch sogenannte benannte Vektoren oder named vectors. Das sind Vektoren, bei dem jedem Element nicht nur eine Indexposition, sondern auch ein Name zugeordnet ist. Um einen named vector zu erstellen, wird ebenfalls die Funktion c() verwendet. Den Elementen wird bei der Erstellung des Vektors aber ein Name (oder “Schlüssel”) zugeordnet. Dieser muss ein character sein. Beachtet, dass bei der Zuweisung von Namen innerhalb von Funktionen anstelle des Zuweisungsoperators &lt;- der Operator = verwendet wird: # Erstellung eines named vectors: Schlüssel sind immer Zeichenketten einkauf &lt;- c(&quot;Apfel&quot;=4, &quot;Banane&quot;=3, &quot;Erdbeere&quot;=20) # ...selbst dann, wenn ihr Wörter ohne Anführungszeichen eingebt, weiß R, dass eine Zeichenkette gemeint ist: einkauf &lt;- c(Apfel=4, Banane=3, Erdbeere=20) # Das geht allerdings nicht, wenn ihr Zahlen als Schlüssel eingebt! # einkauf &lt;- c(1=4, 2=3, 3=20) 2.2.4 Faktoren Da R ursprünglich für die Statistik entwickelt wurde, haben sich die Entwickler:innen der Programmiersprache überlegt, dass es praktisch wäre, wenn es eine Datenstruktur speziell für kategorische (auch “kategoriale”) Daten gäbe. Kategorische Daten sind Daten, die in bestimmte Kategorien oder Gruppen fallen, also beispielsweise Farben, Regionen, Beschäftigungsstatus. Speziell zur Organisation solcher Daten gibt es in R Faktoren. Ein Faktor ist eine spezielle Art von Vektor, der kategorische Daten repräsentiert. Es handelt sich dabei eigentlich um einen “einfachen” Vektor, dem eine zusätzliche Metainformation hinzugefügt wurde: die Information, welche verschiedenen Arten oder Kategorien von Werten der Vektor enthält (=“Levels”). Im Beispiel oben hat der Vektor vier Elemente, aber nur drei verschiedene Elemente, nämlich “Apfel”, “Banane” und “Erdbeere”. Die Levels entsprechen also im Grunde genau den einzigartigen Werten eines Vektors, die wir im Abschnitt zu Sets (Mengen) mithilfe der Funktion unique(c(\"Apfel\", \"Banane\", \"Erdbeere\", \"Apfel\")) erhalten haben. Faktoren erlauben also, sowohl die ursprünglichen, möglicherweise wiederholt vorkommenden Werte als auch die einzigartigen Werte in einem Vektor zu repräsentieren. Faktoren werden mithilfe der Funktion factor() erstellt. Faktoren werden stets aus bereits existierenden Vektoren erstellt, beispielsweise aus dem Vektor fruechte, den wir hier noch einmal neu erstellen: fruechte &lt;- c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;) factor(fruechte) #&gt; [1] Apfel Banane Erdbeere Apfel #&gt; Levels: Apfel Banane Erdbeere In der Praxis werden wir nicht häufig Faktoren selbst erstellen. Trotzdem solltet ihr zumindest von Faktoren gehört haben. Denn Faktoren werden in R häufig automatisch “unter der Motorhaube” beim Anwenden vieler Funktionen erstellt. Ein Beispiel dafür besprechen wir im nächsten Abschnitt. Faktoren vereinfachen viele Operationen und Berechnungen und sind einer der Gründe dafür, warum sich R von anderen Programmiersprachen unterscheidet. Deswegen sind Faktoren zum Verständnis von R und von manchen Funktionen wichtig, auch, wenn wir selbst damit nicht häufig arbeiten. 2.2.5 Operationen auf Vektoren Wir haben gesehen, dass alle Vektoren, egal ob einfache Vektoren, benannte Vektoren oder Faktoren, Elemente in einer festgelegten Reihenfolge enthalten, Wir haben auch gesehen, dass jedes Element einen Index hat, also eine Zahl, welche die Position des Elements in dem Vektor beschreibt. Um auf ein oder mehrere Elemente in einem Vektor zuzugreifen, wird der Zugriffsoperator [] verwendet. Diesen Operator tauchte in der letzten Woche bereits in der Tabelle im Abschnitt “Operatorpräzedenz” auf. In die eckigen Klammern wird der Index oder, bei benannten Vektoren, der Name des ausgewählten Elements geschrieben. Als Beispiel für den Zugriff über den Index sehen wir uns einige Zugriffsoperationen auf den Vektor fruechte an, den wir hier erneut erstellen: fruechte &lt;- c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;) # Zugriff auf das erste Element des Vektors leckere_fruechte über den Index fruechte[1] #&gt; [1] &quot;Apfel&quot; # Zugriff auf Elemente 1-3 fruechte[1:3] #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Erdbeere&quot; # Zugriff auf Elemente 1 und 3 fruechte[c(1,3)] #&gt; [1] &quot;Apfel&quot; &quot;Erdbeere&quot; # Zugriff auf alle Elemente mit dem Wert &quot;Banane&quot; fruechte[fruechte == &quot;Banane&quot;] #&gt; [1] &quot;Banane&quot; Die Zugriffsoperation fruechte[fruechte == \"Banane\"] bedarf vielleicht einer kurzen Erläuterung. Wie funktioniert diese Operation? Warum werden nur die Elemente ausgegeben, deren Wert “Banane” ist? Zunächst wird der Ausdruck in den eckigen Klammern evaluiert, fruechte == \"Banane\". Dabei wird ein Mechanismus aktiviert, der sich Vektorisierung nennt (s. nächster Abschnitt): Beim Auswerten des Ausdrucks fruechte == \"Banane\" wird einzeln für jedes Element überprüft, ob dieses Element dem Wert “Banane” entspricht. Der Ausdruck wird also zu einem Vektor aus Wahrheitswerten ausgewertet wird und nicht zu einem einzelnen Wahrheitswert wie in den Beispielen aus der letzten Woche. Wenn im Vektor fruechte der Wert “Banane” steht, steht in diesem Vektor TRUE und sonst FALSE. Danach wird die eigentliche Zugriffsoperation ausgeführt, allerdings mit dem logischen Vektor anstelle der Indizes: fruechte[c(FALSE, TRUE, FALSE, FALSE)]. Bei einer solchen Zugriffsoperation werden alle Elemente ausgegeben, für die in dem logischen Vektor TRUE steht. Eine Zugriffsoperation der Art fruechte == \"Banane\", wird deswegen auch bedingter Zugriff genannt. Anstelle des logischen Operators == kann hier auch ein anderer logischer Operator oder ein Vergleichsoperator stehen. Elemente in einem Vektor können auch ausgetauscht, hinzugefügt oder entfernt werden: # Element an Indexposition 1 austauschen fruechte[1] &lt;- &quot;Orange&quot; # Neues Element an Indexposition 5 hinzufügen fruechte[5] &lt;- &quot;Birne&quot; # Neues Element am Ende des Vektors hinzufügen fruechte &lt;- c(fruechte, &quot;Melone&quot;) # Neues Element am Anfang des Vektors hinzufügen fruechte &lt;- c(&quot;Traube&quot;, fruechte) # Element an Indexposition 1 entfernen fruechte[-1] #&gt; [1] &quot;Orange&quot; &quot;Banane&quot; &quot;Erdbeere&quot; &quot;Apfel&quot; &quot;Birne&quot; &quot;Melone&quot; Elemente können auch direkt einer neuen Variable zugewiesen werden: erste_frucht &lt;- fruechte[1] print(erste_frucht) #&gt; [1] &quot;Traube&quot; Um sich die Anzahl der Werte in einem Vektor (also dessen “Länge”) ausgeben zu lassen, kann die Funktion length() verwendet werden: length(c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;)) #&gt; [1] 4 Die Funktion length() kann mit der Funktion unique() kombiniert werden, um die Anzahl der einzigartigen Werte in einem Vektor auszugeben: length(unique(c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;))) #&gt; [1] 3 Um auf die Elemente eines benannten Vektors zuzugreifen, kann entweder der Index oder der Name des Elements verwendet werden: einkauf &lt;- c(&quot;Apfel&quot;=4, &quot;Banane&quot;=3, &quot;Erdbeere&quot;=20, &quot;Apfel&quot;=5) # Zugriff auf das Element mit dem Namen &quot;Erdbeere&quot;: Hier müssen die Anführungszeichen wieder explizit angegeben werden (zur Erinnerung: Schlüssel sind immer character!) einkauf[&quot;Erdbeere&quot;] #&gt; Erdbeere #&gt; 20 # Zugriff auf den Wert ohne den Namen einkauf[[&quot;Erdbeere&quot;]] #&gt; [1] 20 # Zugriff auf alle Elemente mit dem Namen &quot;Apfel&quot;: einkauf[&quot;Apfel&quot;] #&gt; Apfel #&gt; 4 # Zugriff auf mehrere Elemente einkauf[c(&quot;Apfel&quot;, &quot;Erdbeere&quot;)] #&gt; Apfel Erdbeere #&gt; 4 20 # Wert (!) des Elements mit dem Namen &quot;Banane&quot; austauschen einkauf[&quot;Banane&quot;] &lt;- 5 # Neues Element mit dem Namen &quot;Birne&quot; hinzufügen einkauf[&quot;Birne&quot;] &lt;- 3 # Neues Element am Ende des Vektors hinzufügen einkauf &lt;- c(einkauf, Melone=1) # Neues Element am Anfang des Vektors hinzufügen einkauf &lt;- c(Traube=12, einkauf) # Element mit dem Namen &quot;Birne&quot; entfernen: einkauf &lt;- einkauf[!(names(einkauf) == &quot;Birne&quot;)] einkauf #&gt; Traube Apfel Banane Erdbeere Apfel Melone #&gt; 12 4 5 20 5 1 Um nur auf die Level, also die verschiedenen Arten von Werten in einem Faktor zuzugreifen, wird die Funktion levels() verwendet: fruechte &lt;- c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Erdbeere&quot;, &quot;Apfel&quot;) fruechte_fct &lt;- factor(fruechte) levels(fruechte_fct) #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Erdbeere&quot; Wir haben bereits gesehen, dass die Funktion length() mit der Funktion unique() kombiniert werden kann, um sich die Anzahl der einzigartigen Werte in einem Vektor ausgeben zu lassen. Aber wenn man herausfinden möchte, wie oft jeder Wert jeweils vorkommt, dann ist das mithilfe der unique() Funktion kompliziert: # Diesen Code müsst ihr nicht verstehen, er dient nur, um die Komplexität zu illustrieren haeufigkeiten &lt;- sapply(unique(fruechte), function(x) sum(fruechte == x)) haeufigkeiten #&gt; Apfel Banane Erdbeere #&gt; 2 1 1 Mithilfe von Faktoren können wir viel einfacher herausfinden, wie oft jeder Wert vorkommt, und zwar mithilfe der Funktion table(): table(factor(fruechte)) #&gt; #&gt; Apfel Banane Erdbeere #&gt; 2 1 1 Tatsächlich wandelt die Funktion table() automatisch den Vektor in einen Faktor um. Wenn wir herausfinden wollen, wie oft jeder Wert in einem Vektor vorkommt, dann brauchen wir also nicht unbedingt erst den Vektor in einen Faktor umwandeln. Wir können die table()-Funktion direkt auf den Vektor anwenden: table(fruechte) #&gt; fruechte #&gt; Apfel Banane Erdbeere #&gt; 2 1 1 Wie wir gesehen haben, greift die Funktion table() unter der Motorhaube auf Faktoren zurück und wandeln einen Vektor automatisch in einen Faktor um. Verständnisfragen: Wie viele Elemente hat der Vektor fruechte? Wie kann das Element \"Orange\" aus dem Vektor fruechte entfernt werden? An welcher Indexposition steht es jetzt? Sind einzelne Zahlen oder Zeichenketten in R auch Datenstrukturen? Wenn ja, welche? Zu welchem Wahrheitswert wird der Ausdruck c(2) == 2 evaluiert? Warum? Wie kann auf alle Elemente mit dem Wert 3 im Vektor einkauf zugegriffen werden? 2.2.6 Vektorisierung Im Abschnitt “Operationen auf Vektoren” habt ihr bereits gesehen, dass die bereits bekannten Operatoren wie ==, &gt; oder + auch auf Vektoren angewendet werden können. Wenn Operatoren auf Vektoren angewandt werden, wird die Operation automatisch elementweise auf jedes Element des Vektors angewandt. Dieser Mechanismus nennt sich Vektorisierung. Wir werden in der Sitzung zu Funktionen noch einmal darauf zurückkommen. Wichtig ist dabei zu beachten, dass beide Vektoren die gleiche Länge haben müssen. Auf Vektoren vom Typ numeric oder integer (also Vektoren, deren Elemente alle numerics oder integers sind) können die arithmetischen Operatoren angewandt werden, zum Beispiel: vec_1 &lt;- c(1, 2, 3) vec_2 &lt;- c(3, 5, 6) vec_1 + vec_2 #&gt; [1] 4 7 9 Wird ein Vektor nicht mit einem anderen Vektor, sondern mit einem einzelnen Wert addiert (oder subtrahiert, dividiert, … ), dann wird jedes Element des Vektors mit diesem Wert verrechnet: vec_1 + 5 #&gt; [1] 6 7 8 Daneben können auch Vergleichsoperatoren und logische Operatoren auf Vektoren angewandt werden, und es können sogar zwei Vektoren elementweise verglichen werden: vec_1 == vec_2 #&gt; [1] FALSE FALSE FALSE vec_1 &lt; vec_2 #&gt; [1] TRUE TRUE TRUE vec_1 &lt; 3 #&gt; [1] TRUE TRUE FALSE In der letzten Sitzung haben wir bereits den Unterschied zwischen dem “elementweisen” Operatoren &amp; und | und den Operatoren &amp;&amp; und || angeschnitten. Das Verhalten war bei der Auswertung einfacher Ausdrücke mit einzelnen Werten nicht bemerkbar, aber es wird relevant, wenn die Operatoren auf Vektoren anstelle von einzelnen Werten angewandt werden: zahlen &lt;- 1:5 zahlen &gt; 2 &amp; zahlen &lt; 4 #&gt; [1] FALSE FALSE TRUE FALSE FALSE zahlen &gt; 2 &amp;&amp; zahlen &lt; 4 #&gt; Error in zahlen &gt; 2 &amp;&amp; zahlen &lt; 4: &#39;length = 5&#39; in coercion to &#39;logical(1)&#39; Verständnisfragen: Warum wird der Ausdruck zahlen &gt; 2 &amp; zahlen &lt; 4 zu FALSE FALSE TRUE FALSE FALSE evaluiert? Welche Datenstruktur wird ausgegeben, wenn der Ausdruck evaluiert wird? Was bedeutet die Fehlermeldung bei der Auswertung des Ausdrucks zahlen &gt; 2 &amp;&amp; zahlen &lt; 4? 2.3 Listen Listen enthalten wie Vektoren eine Sequenz von Werten. Im Abschnitt zu Vektoren haben wir bereits gelernt, dass diese Werte auch Elemente genannt werden. Genau wie bei Vektoren können sich Werte in einer Liste wiederholen. Die Elemente einer Liste sind ebenfalls geordnet, das heißt jedes Element hat einen Index, genau wie bei Vektoren. Ähnlich wie bei benannten Vektoren kann man den Elementen einer Liste außerdem einen Namen (wird manchmal auch Schlüssel genannt) zuordnen, über den auf den Wert zugegriffen werden kann. Anders als bei Vektoren können die Elemente einer Liste aber verschiedene Datentypen haben. 2.3.1 Listen erstellen Listen werden mithilfe der Funktion list() erstellt. Genau wie bei benannten Vektoren müssen die Namen oder Schlüssel der Werte Zeichenketten sein. Wenn keine Anführungszeichen angegeben werden, erkennt R auch hier automatisch, dass eine Zeichenkette gemeint ist. # Liste erstellen einkauf_liste &lt;- list(frucht=&quot;Apfel&quot;, anzahl=20, vorraetig=TRUE) # Liste ausgeben print(einkauf_liste) #&gt; $frucht #&gt; [1] &quot;Apfel&quot; #&gt; #&gt; $anzahl #&gt; [1] 20 #&gt; #&gt; $vorraetig #&gt; [1] TRUE Die einzelnen Elemente müssen dabei nicht unbedingt benannt werden, das heißt, der Code oben könnte genausogut so aussehen: list(&quot;Apfel&quot;, 20, TRUE) #&gt; [[1]] #&gt; [1] &quot;Apfel&quot; #&gt; #&gt; [[2]] #&gt; [1] 20 #&gt; #&gt; [[3]] #&gt; [1] TRUE Die Elemente einer Liste können auch Vektoren oder selbst Listen sein. Im ersten Fall wird die Liste dann “Liste von Vektoren” und im letzteren Fall “Liste von Listen” genannt. Ein allgemeiner Begriff für solche Listen ist “verschachtelte Liste”. # Liste von Vektoren erstellen: liste_von_vektoren &lt;- list(frucht = c(&quot;Apfel&quot;, &quot;Erdbeere&quot;, &quot;Banane&quot;), anzahl = c(20, 32, 0), vorraetig = c(TRUE, TRUE, FALSE) ) print(liste_von_vektoren) #&gt; $frucht #&gt; [1] &quot;Apfel&quot; &quot;Erdbeere&quot; &quot;Banane&quot; #&gt; #&gt; $anzahl #&gt; [1] 20 32 0 #&gt; #&gt; $vorraetig #&gt; [1] TRUE TRUE FALSE # Liste von Listen erstellen: liste_von_listen &lt;- list(Apfel = list(20, FALSE), Erdbeere = list(32, FALSE), Banane = list(0, TRUE) ) print(liste_von_listen) #&gt; $Apfel #&gt; $Apfel[[1]] #&gt; [1] 20 #&gt; #&gt; $Apfel[[2]] #&gt; [1] FALSE #&gt; #&gt; #&gt; $Erdbeere #&gt; $Erdbeere[[1]] #&gt; [1] 32 #&gt; #&gt; $Erdbeere[[2]] #&gt; [1] FALSE #&gt; #&gt; #&gt; $Banane #&gt; $Banane[[1]] #&gt; [1] 0 #&gt; #&gt; $Banane[[2]] #&gt; [1] TRUE Achtung: In der Liste liste_von_vektoren sind alle Vektoren gleich lang und beziehen sich aufeinander: Von der Frucht Apfel sind noch 20 Stück da, sodass Äpfel vorrätig sind. Dies muss aber nicht unbedingt der Fall sein! Die Elemente einer verschachtelten Liste können unterschiedlich lang sein und müssen sich nicht unbedingt aufeinander beziehen. Schematisch sieht eine Liste von Vektoren (hier mit Vektoren derselben Länge) in etwa so aus: Das Bild illustriert auch, wie auf die Elemente in einer Liste von Vektoren zugegriffen werden kann. Der Zugriff auf Elemente in einer Liste ist nämlich etwas komplizierter als bei einem Vektor. Darum geht es im folgenden Abschnitt. 2.3.2 Operationen auf Listen Auf Elemente und ihre Namen über den Index zugreifen: einkauf_liste[1] #&gt; $frucht #&gt; [1] &quot;Apfel&quot; Auf Elemente ohne Namen über den Index zugreifen: einkauf_liste[[1]] #&gt; [1] &quot;Apfel&quot; Auf Elemente über den Namen (Schlüssel) zugreifen: # Option 1 einkauf_liste$frucht #&gt; [1] &quot;Apfel&quot; # Option 2 einkauf_liste[[&quot;frucht&quot;]] #&gt; [1] &quot;Apfel&quot; Auf das erste Element des ersten Vektors in einer Liste von Vektoren über den Index zugreifen: liste_von_vektoren[[1]][1] #&gt; [1] &quot;Apfel&quot; Auf das erste Element des ersten Vektors in einer Liste von Vektoren über den Schlüssel zugreifen # Option 1 liste_von_vektoren[[&quot;frucht&quot;]][1] #&gt; [1] &quot;Apfel&quot; # Option 2 liste_von_vektoren$frucht[1] #&gt; [1] &quot;Apfel&quot; Listen kombinieren mit der Funktion c(): einkauf_bananen &lt;- list(frucht=&quot;Banane&quot;, anzahl=0, vorraetig=FALSE) einkauf_gesamt &lt;- c(einkauf_liste, einkauf_bananen) Verständnisfragen: Um welche Datenstruktur handelt es sich bei dem Objekt einkauf_gesamt? Was ist der Datentyp der Elemente des Objekts einkauf_gesamt? Was ist der Unterschied zwischen Listen und Named Vectors? Sehr anschaulich illustriert dieser Abschnitt in Hadley Wickham’s Lehrbuch “Advanced R” den Unterschied zwischen dem Zugriff mit einfachen und mit doppelten eckigen Klammern: Figure 2.1: Quelle: Hadley Wickham (2019), https://adv-r.hadley.nz/subsetting.html#subset-single Im letzten Beispiel haben wir die bereits bekannte Funktion c() verwendet, um zwei Listen in eine neue Liste einkauf_gesamt zu kombinieren. Das heißt: Wenn wir die Funktion c() verwenden, um zwei Listen zu kombinieren, dann kommt auch eine Liste dabei raus. Man kann mit der Funktion c() aber keine Listen aus einzelnen Werten erstellen: # Mit der Funktion c() kann man KEINE Liste erstellen einkauf_bananen &lt;- c(frucht=&quot;Banane&quot;, anzahl=0, vorraetig=FALSE) typeof(einkauf_bananen) #&gt; [1] &quot;character&quot; 2.4 Auf einen Blick: Vektoren vs benannte Vektoren vs Faktoren vs Listen In diesem Abschnitt werden die Unterschiede zwischen einfachen Vektoren, benannten Vektoren, Faktoren und Listen anhand eines Beispiels illustriert. Das Beispiel illustriert, wie Daten zu Wetterbedingungen für jeden Monat eines Jahres mithilfe der verschiedenen Datenstrukturen organisiert werden können. # Vektor: Ein einfacher Vektor, der die Wetterbedingungen für jeden Monat eines Jahres speichert. weather_conditions &lt;- c(&quot;sonnig&quot;, &quot;bewölkt&quot;, &quot;sonnig&quot;, &quot;regnerisch&quot;, &quot;bewölkt&quot;, &quot;sonnig&quot;, &quot;regnerisch&quot;, &quot;bewölkt&quot;, &quot;bewölkt&quot;, &quot;sonnig&quot;, &quot;bewölkt&quot;, &quot;regnerisch&quot;) avg_rainfall &lt;- c(50, 40, 45, 60, 55, 70, 80, 75, 70, 65, 55, 50) print(weather_conditions) #&gt; [1] &quot;sonnig&quot; &quot;bewölkt&quot; &quot;sonnig&quot; &quot;regnerisch&quot; &quot;bewölkt&quot; #&gt; [6] &quot;sonnig&quot; &quot;regnerisch&quot; &quot;bewölkt&quot; &quot;bewölkt&quot; &quot;sonnig&quot; #&gt; [11] &quot;bewölkt&quot; &quot;regnerisch&quot; print(avg_rainfall) #&gt; [1] 50 40 45 60 55 70 80 75 70 65 55 50 # Named Vector: Ein benannter Vektor, der die Wetterbedingungen für jeden Monat eines Jahres speichert und Monatsnamen als Namen für jedes Element verwendet. weather_conditions_named &lt;- c(Jan=&quot;sonnig&quot;, Feb=&quot;bewölkt&quot;, Mar=&quot;sonnig&quot;, Apr=&quot;regnerisch&quot;, Mai=&quot;bewölkt&quot;, Jun=&quot;sonnig&quot;, Jul=&quot;regnerisch&quot;, Aug=&quot;bewölkt&quot;, Sep=&quot;bewölkt&quot;, Okt=&quot;sonnig&quot;, Nov=&quot;bewölkt&quot;, Dez=&quot;regnerisch&quot;) print(weather_conditions_named) #&gt; Jan Feb Mar Apr Mai Jun #&gt; &quot;sonnig&quot; &quot;bewölkt&quot; &quot;sonnig&quot; &quot;regnerisch&quot; &quot;bewölkt&quot; &quot;sonnig&quot; #&gt; Jul Aug Sep Okt Nov Dez #&gt; &quot;regnerisch&quot; &quot;bewölkt&quot; &quot;bewölkt&quot; &quot;sonnig&quot; &quot;bewölkt&quot; &quot;regnerisch&quot; # Faktor: Häufigkeitsverteilung der Wetterbedingungen # Konvertieren des Vektors in einen Faktor mit benannten Ebenen weather_factor &lt;- factor(weather_conditions, levels=c(&quot;sonnig&quot;, &quot;bewölkt&quot;, &quot;regnerisch&quot;), ordered=TRUE) # Häufigkeitsverteilung der Wetterbedingungen weather_table &lt;- table(weather_factor) # Ergebnis anzeigen print(weather_table) #&gt; weather_factor #&gt; sonnig bewölkt regnerisch #&gt; 4 5 3 # Liste: Eine Liste, die Informationen über das Wetter für jeden Monat des Jahres enthält. # Jedes Element der Liste ist ein eigenes Objekt, in diesem Fall ein Vektor. weather_list &lt;- list(Condition=weather_conditions, Rainfall=avg_rainfall, Month=c(&quot;Januar&quot;, &quot;Februar&quot;, &quot;Maerz&quot;, &quot;April&quot;, &quot;Mai&quot;, &quot;Juni&quot;, &quot;Juli&quot;, &quot;August&quot;, &quot;September&quot;, &quot;Oktober&quot;, &quot;November&quot;, &quot;Dezember&quot;)) print(weather_list) #&gt; $Condition #&gt; [1] &quot;sonnig&quot; &quot;bewölkt&quot; &quot;sonnig&quot; &quot;regnerisch&quot; &quot;bewölkt&quot; #&gt; [6] &quot;sonnig&quot; &quot;regnerisch&quot; &quot;bewölkt&quot; &quot;bewölkt&quot; &quot;sonnig&quot; #&gt; [11] &quot;bewölkt&quot; &quot;regnerisch&quot; #&gt; #&gt; $Rainfall #&gt; [1] 50 40 45 60 55 70 80 75 70 65 55 50 #&gt; #&gt; $Month #&gt; [1] &quot;Januar&quot; &quot;Februar&quot; &quot;Maerz&quot; &quot;April&quot; &quot;Mai&quot; &quot;Juni&quot; #&gt; [7] &quot;Juli&quot; &quot;August&quot; &quot;September&quot; &quot;Oktober&quot; &quot;November&quot; &quot;Dezember&quot; # Andere Darstellungsform als Liste von Listen weather_list &lt;- list(Januar=list(50, &quot;sonnig&quot;), Februar=list(40, &quot;bewölkt&quot;), Maerz=list(45, &quot;sonnig&quot;), April=list(60, &quot;regnerisch&quot;), Mai=list(55, &quot;bewölkt&quot;), Juni=list(70, &quot;sonnig&quot;), Juli=list(80, &quot;regnerisch&quot;), August=list(75, &quot;bewölkt&quot;), September=list(70, &quot;bewölkt&quot;), Oktober=list(65, &quot;sonnig&quot;), November=list(55, &quot;bewölkt&quot;), Dezember=list(50, &quot;regnerisch&quot;) ) print(weather_list) #&gt; $Januar #&gt; $Januar[[1]] #&gt; [1] 50 #&gt; #&gt; $Januar[[2]] #&gt; [1] &quot;sonnig&quot; #&gt; #&gt; #&gt; $Februar #&gt; $Februar[[1]] #&gt; [1] 40 #&gt; #&gt; $Februar[[2]] #&gt; [1] &quot;bewölkt&quot; #&gt; #&gt; #&gt; $Maerz #&gt; $Maerz[[1]] #&gt; [1] 45 #&gt; #&gt; $Maerz[[2]] #&gt; [1] &quot;sonnig&quot; #&gt; #&gt; #&gt; $April #&gt; $April[[1]] #&gt; [1] 60 #&gt; #&gt; $April[[2]] #&gt; [1] &quot;regnerisch&quot; #&gt; #&gt; #&gt; $Mai #&gt; $Mai[[1]] #&gt; [1] 55 #&gt; #&gt; $Mai[[2]] #&gt; [1] &quot;bewölkt&quot; #&gt; #&gt; #&gt; $Juni #&gt; $Juni[[1]] #&gt; [1] 70 #&gt; #&gt; $Juni[[2]] #&gt; [1] &quot;sonnig&quot; #&gt; #&gt; #&gt; $Juli #&gt; $Juli[[1]] #&gt; [1] 80 #&gt; #&gt; $Juli[[2]] #&gt; [1] &quot;regnerisch&quot; #&gt; #&gt; #&gt; $August #&gt; $August[[1]] #&gt; [1] 75 #&gt; #&gt; $August[[2]] #&gt; [1] &quot;bewölkt&quot; #&gt; #&gt; #&gt; $September #&gt; $September[[1]] #&gt; [1] 70 #&gt; #&gt; $September[[2]] #&gt; [1] &quot;bewölkt&quot; #&gt; #&gt; #&gt; $Oktober #&gt; $Oktober[[1]] #&gt; [1] 65 #&gt; #&gt; $Oktober[[2]] #&gt; [1] &quot;sonnig&quot; #&gt; #&gt; #&gt; $November #&gt; $November[[1]] #&gt; [1] 55 #&gt; #&gt; $November[[2]] #&gt; [1] &quot;bewölkt&quot; #&gt; #&gt; #&gt; $Dezember #&gt; $Dezember[[1]] #&gt; [1] 50 #&gt; #&gt; $Dezember[[2]] #&gt; [1] &quot;regnerisch&quot; 2.5 Matrizen Eine Matrix ist in R im Grunde eine Kombination mehrerer Vektoren in Spalten und Zeilen. Formell ausgedrückt: In einer Matrix kann jede Spalte und jede Zeile als Vektor aufgefasst werden. Das heißt, dass jedes Element in einer Matrix denselben Datentyp hat, eben genau wie bei Vektoren. Wenn beispielsweise alle Elemente den Typ character haben, spricht man auch von einer character-Matrix. Zusätzlich haben Matrizen eine Dimension, die mithilfe der Funktion dim() abgefragt werden kann. Die Dimension einer Matrix ist die Anzahl ihrer Zeilen und Spalten. Die Matrix unten hat beispielsweise die Dimension 2x3: Sie hat zwei Zeilen und drei Spalten. 2.5.1 Matrizen erstellen Da Matrizen aus Vektoren bestehen, können Matrizen erstellt werden, indem mehrere Vektoren kombiniert werden, oder, indem ein einzelner Vektor in verschiedene Spalten aufgeteilt wird. Dabei wird bei der Erstellung der Matrix mithilfe dem Zusatz ncol festgelegt, in wie viele Spalten die Elemente des Vektors organisiert werden sollen. Wir betrachten zunächst ein ganz simples Beispiel: # Matrix aus einem einzigen Vektor erstellen mit der Funktion matrix() fruechte &lt;- matrix(c(&quot;Apfel&quot;, &quot;Orange&quot;, &quot;Banane&quot;, &quot;Kiwi&quot;, &quot;Birne&quot;, &quot;Erdbeere&quot;), ncol = 3) print(fruechte) #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;Apfel&quot; &quot;Banane&quot; &quot;Birne&quot; #&gt; [2,] &quot;Orange&quot; &quot;Kiwi&quot; &quot;Erdbeere&quot; # Dimension einer Matrix ausgeben lassen dim(fruechte) # Dimension ist 2 x 3 #&gt; [1] 2 3 Die Matrix fruechte ist jedoch nicht sehr informativ. Häufig haben die Spalten und Zeilen einer Matrix eine Bedeutung, sodass es sinnvoll ist, die Zeilen und/oder Spalten zu benennen. Wenn die Matrix wie im Beispiel oben aus einem einzelnen Vektor erstellt wird, können direkt beim Erstellen der Matrix die Zeilen- und Spaltennamen angegeben werden. In unserem Beispiel macht es nicht so viel Sinn, auch den Zeilen eine Bedeutung zu geben. Deswegen verwenden wir in der Funktion list() innerhalb der Funktion matrix() hier den Wert NULL (siehe dazu den Abschnitt “Fehlende und ungültige Werte in Datenstrukturen”). Wenn Zeilennamen festgelegt werden sollen, kann NULL einfach durch einen Vektor mit den Zeilennamen ausgetauscht werden. Beachtet, dass es einen Unterschied macht, ob die Elemente der Liste einen Namen haben oder nicht: # Matrix erstellen und direkt Namen für die Spalten festlegen # Achtung: die Dimension ist jetzt 3 x 2 ! matrix(c(&quot;Apfel&quot;, &quot;Orange&quot;, &quot;Banane&quot;, &quot;Kiwi&quot;, &quot;Birne&quot;, &quot;Erdbeere&quot;), ncol = 2, dimnames = list(NULL, c(&quot;nicht_vorraetig&quot;, &quot;vorraetig&quot;))) #&gt; nicht_vorraetig vorraetig #&gt; [1,] &quot;Apfel&quot; &quot;Kiwi&quot; #&gt; [2,] &quot;Orange&quot; &quot;Birne&quot; #&gt; [3,] &quot;Banane&quot; &quot;Erdbeere&quot; # Matrix erstellen, Namen für einzelne Spalten festlegen, und Spalten insgesamt benennen matrix(c(&quot;Apfel&quot;, &quot;Orange&quot;, &quot;Banane&quot;, &quot;Kiwi&quot;, &quot;Birne&quot;, &quot;Erdbeere&quot;), ncol = 2, dimnames = list(NULL, &quot;Vorratsstatus&quot; = c(&quot;nicht_vorraetig&quot;, &quot;vorraetig&quot;))) #&gt; Vorratsstatus #&gt; nicht_vorraetig vorraetig #&gt; [1,] &quot;Apfel&quot; &quot;Kiwi&quot; #&gt; [2,] &quot;Orange&quot; &quot;Birne&quot; #&gt; [3,] &quot;Banane&quot; &quot;Erdbeere&quot; Wenn Matrizen aus mehreren Vektoren erstellt werden, sind die Spalten- bzw. Zeilennamen automatisch die Namen der Vektoren, aus denen die Matrix erstellt wurde. Um Matrizen aus bereits existierenden Vektoren zu erstellen, kann entweder die Funktion rbind() oder die Funktion cbind() verwendet werden. rbind() fügt die Vektoren als Zeilen, also übereinander, zusammen. cbind() fügt die Vektoren als Spalten, also nebeneinander, zusammen. # Matrix zeilenweise erstellen mit der Funktion rbind() nicht_vorraetig &lt;- c(&quot;Banane&quot;, &quot;Orange&quot;, &quot;Birne&quot;) vorraetig &lt;- c(&quot;Apfel&quot;, &quot;Erbeere&quot;, &quot;Kiwi&quot;) fruechte_einkauf &lt;- rbind(nicht_vorraetig, vorraetig) fruechte_einkauf #&gt; [,1] [,2] [,3] #&gt; nicht_vorraetig &quot;Banane&quot; &quot;Orange&quot; &quot;Birne&quot; #&gt; vorraetig &quot;Apfel&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; # Matrix spaltenweise erstellen mit der Funktion cbind() nicht_vorraetig &lt;- c(&quot;Banane&quot;, &quot;Orange&quot;, &quot;Birne&quot;) vorraetig &lt;- c(&quot;Apfel&quot;, &quot;Erbeere&quot;, &quot;Kiwi&quot;) fruechte_einkauf &lt;- cbind(nicht_vorraetig, vorraetig) fruechte_einkauf #&gt; nicht_vorraetig vorraetig #&gt; [1,] &quot;Banane&quot; &quot;Apfel&quot; #&gt; [2,] &quot;Orange&quot; &quot;Erbeere&quot; #&gt; [3,] &quot;Birne&quot; &quot;Kiwi&quot; Matrizen können auch aus anderen bereits existierenden Matrizen erstellt werden. Hierzu könen ebenfalls die Funktionen rbind() und cbind() verwendet werden: # Matrizen zeilenweise kombinieren mat_3 &lt;- rbind(nicht_vorraetig, vorraetig) mat_3 #&gt; [,1] [,2] [,3] #&gt; nicht_vorraetig &quot;Banane&quot; &quot;Orange&quot; &quot;Birne&quot; #&gt; vorraetig &quot;Apfel&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; # Matrizen spaltenweise kombinieren mat_4 &lt;- cbind(nicht_vorraetig, vorraetig) mat_4 #&gt; nicht_vorraetig vorraetig #&gt; [1,] &quot;Banane&quot; &quot;Apfel&quot; #&gt; [2,] &quot;Orange&quot; &quot;Erbeere&quot; #&gt; [3,] &quot;Birne&quot; &quot;Kiwi&quot; Matrizen können auch in Dataframes umgewandelt werden und umgekehrt. Das behandeln wir im Abschnitt “Dataframes”. 2.5.2 Operationen auf Matrizen Zugriff auf eine Zeile und Zeilen (um)benennen: # Zugriff auf Zeile 1 fruechte[1, ] #&gt; [1] &quot;Apfel&quot; &quot;Banane&quot; &quot;Birne&quot; # Zeilen nachträglich (um)benennen rownames(fruechte_einkauf) &lt;- c(&quot;kuehlschrank&quot;, &quot;vorratskammer&quot;, &quot;regal&quot;) fruechte_einkauf #&gt; nicht_vorraetig vorraetig #&gt; kuehlschrank &quot;Banane&quot; &quot;Apfel&quot; #&gt; vorratskammer &quot;Orange&quot; &quot;Erbeere&quot; #&gt; regal &quot;Birne&quot; &quot;Kiwi&quot; # Zugriff auf Zeile mit dem Namen &quot;kuehlschrank&quot; fruechte_einkauf[&quot;kuehlschrank&quot;, ] #&gt; nicht_vorraetig vorraetig #&gt; &quot;Banane&quot; &quot;Apfel&quot; Zugriff auf eine Spalte und Spalten (um)benennen: # Zugriff auf Spalte mit Index 1 fruechte[, 1] #&gt; [1] &quot;Apfel&quot; &quot;Orange&quot; # Zugriff auf Spalte mit dem Namen &quot;vorraetig&quot; fruechte_einkauf[, &quot;vorraetig&quot;] #&gt; kuehlschrank vorratskammer regal #&gt; &quot;Apfel&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; # Spalten nachträglich (um)benennen colnames(fruechte_einkauf) &lt;- c(&quot;vorhanden&quot;, &quot;nicht_vorhanden&quot;) Zugriff auf ein Element: # Zugriff auf das Element in Zeile 1 und Spalte 2 fruechte[1, 2] #&gt; [1] &quot;Banane&quot; Bedingter Zugriff, hier Zugriff auf alle Elemente mit dem Wert “Banane”: # Zugriff auf alle Elemente mit dem Wert &quot;Banane&quot; fruechte[fruechte == &quot;Banane&quot;] #&gt; [1] &quot;Banane&quot; Da Matrizen aus Vektoren bestehen, können wie auf Vektoren auch auf Matrizen die bereits bekannten Operatoren angewendet werden. Dabei wird wieder der Mechanismus der Vektorisierung aktiviert: Wenn Operatoren auf Matrizen angewandt werden, wird die Operation automatisch elementweise auf jedes Element der Matrix angewandt: mat_1 &lt;- matrix(c(1, 1, 2, 2), ncol=2) mat_1 + 2 #&gt; [,1] [,2] #&gt; [1,] 3 4 #&gt; [2,] 3 4 # Das geht auch mit zwei Matrizen mat_2 &lt;- matrix(c(4, 4, 4, 4), ncol=2) mat_1 + mat_2 #&gt; [,1] [,2] #&gt; [1,] 5 6 #&gt; [2,] 5 6 Matrizen können auch kombiniert werden. Wir haben ja bereits beim Erstellen von Matrizen aus bereits existierenden Vektoren oder Matrizen die Funktionen rbind() und cbind() verwendet: # Matrizen zeilenweise kombinieren mat_3 &lt;- rbind(mat_1, mat_2) mat_3 #&gt; [,1] [,2] #&gt; [1,] 1 2 #&gt; [2,] 1 2 #&gt; [3,] 4 4 #&gt; [4,] 4 4 # Matrizen spaltenweise kombinieren mat_4 &lt;- cbind(mat_1, mat_2) mat_4 #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 2 4 4 #&gt; [2,] 1 2 4 4 Matrizen können aber nicht immer kombiniert werden. Eine Voraussetzung dafür, dass Matrizen kombiniert werden können, ist, dass sie dieselbe Anzahl von Zeilen und Spalten (also dieselbe Dimension) haben. Die beiden Matrizen mat_3 und mat_4 haben beispielsweise umgekehrte Dimensionen: mat_3 ist eine 4x2-Matrix, und mat_4 ist eine 2x4-Matrix. Wenn die beiden Matrizen kombiniert werden sollen, müssen sie erst in dieselbe Form gebracht werden. Das geht ganz einfach mithilfe der Funktion t(). Das t steht dabei für “Transponieren”. # Matrix mat_3 transponieren mat_3t &lt;- t(mat_3) # Matrix mat_4 und transponierte Matrix kombinieren: cbind(mat_3t, mat_4) #&gt; [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #&gt; [1,] 1 1 4 4 1 2 4 4 #&gt; [2,] 2 2 4 4 1 2 4 4 Verständnisfragen: Welche Dimension hat die Matrix fruechte_einkauf? Welchen Datentyp haben die Elemente der Matrix fruechte_einkauf? Wie kann man eine Matrix mit fünf Spalten erstellen? 2.6 Arrays Ein Array ermöglicht, einfach gesagt, mehrere Matrizen von gleicher Größe in einer einzigen Datenstruktur zu “stapeln”, wobei jede Matrix eine eigene “Schicht” oder “Ebene” im Array bildet. Auch Arrays haben eine Dimension, allerdings ist damit in Bezug auf Arrays etwas anderes gemeint als in Bezug auf Matrizen. Während die Dimension einer Matrix die Anzahl ihrer Zeilen und Spalten beschreibt, hat der Dimensionsbegriff bei Arrays eine erweiterte Bedeutung. Bei einem Array bezieht sich die Dimension auf die Anzahl der “Richtungen” oder “Achsen”, in denen die Daten organisiert sind. Dies kann die Anzahl der Zeilen, Spalten, “Schichten” und weiterer Organisationsweisen in höherdimensionalen Arrays umfassen. Jede dieser “Richtungen” hat eine bestimmte Größe, das heißt eine festgelegte Anzahl von Elementen. Arrays werden mithilfe der Funktion array() erstellt: # Daten für das Array fruechte_daten &lt;- c( &quot;Apfel&quot;, &quot;Orange&quot;, &quot;Birne&quot;, &quot;Erbeere&quot;, &quot;Melone&quot;, &quot;Kiwi&quot;, &quot;Banane&quot;, &quot;Traube&quot;, &quot;Apfel&quot;, &quot;Papaya&quot;, &quot;Quitte&quot;, &quot;Mango&quot; ) # Erstellen eines 3D-Arrays mit 2 Zeilen, 3 Spalten und 2 &quot;Ebenen&quot; (jede Ebene ist eine separate Matrix) fruechte_array &lt;- array(fruechte_daten, dim = c(2, 3, 2)) # Ausgabe des Arrays print(fruechte_array) #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;Apfel&quot; &quot;Birne&quot; &quot;Melone&quot; #&gt; [2,] &quot;Orange&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;Banane&quot; &quot;Apfel&quot; &quot;Quitte&quot; #&gt; [2,] &quot;Traube&quot; &quot;Papaya&quot; &quot;Mango&quot; Die Dimension des Arrays fruechte_array lässt sich an der Länge des Vektors dim=c(2, 3, 2) ablesen: Da der Vektor drei Elemente hat, handelt es sich um ein dreidimensionales Array. Das erste Element des Vektors dim legt fest, dass jede Matrix zwei Zeilen hat, das zweite Element legt fest, dass jede Matrix drei Spalten hat, und das dritte Element legt fest, dass es zwei Matrizen gibt. 2.6.1 Operationen auf Arrays Zugriff auf eine Matrix: # Zugriff auf die erste Matrix fruechte_array[,, 1] #&gt; [,1] [,2] [,3] #&gt; [1,] &quot;Apfel&quot; &quot;Birne&quot; &quot;Melone&quot; #&gt; [2,] &quot;Orange&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; Zugriff auf eine Spalte einer Matrix: # Zugriff auf die zweite Spalte der ersten Matrix fruechte_array[, 2, 1] #&gt; [1] &quot;Birne&quot; &quot;Erbeere&quot; Zugriff auf ein Element: # Zugriff auf das Element in der ersten Zeile und zweiten Spalte der ersten Matrix fruechte_array[1, 2, 1] #&gt; [1] &quot;Birne&quot; Dimensionen benennen: dimnames(fruechte_array) &lt;- list( Vorratsstatus = c(&quot;vorraetig&quot;, &quot;nicht_vorraetig&quot;), Vorratsort = c(&quot;kuehlschrank&quot;, &quot;vorratskammer&quot;, &quot;regal&quot;), Haus = c(&quot;Wohnhaus&quot;, &quot;Ferienhaus&quot;) ) fruechte_array #&gt; , , Haus = Wohnhaus #&gt; #&gt; Vorratsort #&gt; Vorratsstatus kuehlschrank vorratskammer regal #&gt; vorraetig &quot;Apfel&quot; &quot;Birne&quot; &quot;Melone&quot; #&gt; nicht_vorraetig &quot;Orange&quot; &quot;Erbeere&quot; &quot;Kiwi&quot; #&gt; #&gt; , , Haus = Ferienhaus #&gt; #&gt; Vorratsort #&gt; Vorratsstatus kuehlschrank vorratskammer regal #&gt; vorraetig &quot;Banane&quot; &quot;Apfel&quot; &quot;Quitte&quot; #&gt; nicht_vorraetig &quot;Traube&quot; &quot;Papaya&quot; &quot;Mango&quot; 2.7 Dataframes Dataframes werden zur Darstellung tabellarischer Daten verwendet. Sie ähneln auf den ersten Blick Matrizen, jedoch können sie Elemente unterschiedlichen Typs beinhalten: Jede Spalte eines Dataframes ist ein Vektor, aber anders als bei Matrizen können die Zeilen nicht als Vektoren aufgefasst werden, da die Elemente in den verschiedenen Spalten unterschiedliche Datentypen haben können. Genauer gesagt ist ein Dataframe also eigentlich eine Art von Liste von Vektoren, bei der jedes Element, also jeder Vektor, dieselbe Länge haben muss: Eine Liste mit fünf Elementen vom Typ numeric könnte bespielsweise genausogut als Dataframe mit einer Zeile und fünf Spalten dargestellt werden. Eine Liste mit vier Elementen, wobei die Elemente Vektoren mit jeweils zwei Elementen sind, könnte als Dataframe mit zwei Zeilen und vier Spalten dargestellt werden. Anders als bei einer Liste hat in einem Dataframe aber nicht nur jede Spalte, sondern auch jede Zeile einen Index. Darauf kommen wir im Abschnitt “Operationen auf Dataframes” zurück. 2.7.1 Dataframes erstellen Weil die Spalten eines Dataframes Vektoren sind, kann man Dataframes “spaltenweise” aus Vektoren erstellen. Dazu erstellt man zunächst entweder einen Vektor für jede Spalte und kombiniert diese dann mithilfe der Funktion data.frame() in ein Dataframe-Objekt: # Dataframe aus Vektoren erstellen: Variante 1 fruechte &lt;- c(&quot;Apfel&quot;, &quot;Erdbeere&quot;, &quot;Banane&quot;) anzahl &lt;- c(20, 32, 0) vorraetig &lt;- c(TRUE, TRUE, FALSE) df &lt;- data.frame(fruechte, anzahl, vorraetig) print(df) #&gt; fruechte anzahl vorraetig #&gt; 1 Apfel 20 TRUE #&gt; 2 Erdbeere 32 TRUE #&gt; 3 Banane 0 FALSE # Dataframe aus Vektoren erstellen: Variante 2 fruechte_df &lt;- data.frame(frucht = c(&quot;Apfel&quot;, &quot;Erdbeere&quot;, &quot;Banane&quot;), anzahl = c(20, 32, 0), vorraetig = c(TRUE, TRUE, FALSE) ) print(fruechte_df) #&gt; frucht anzahl vorraetig #&gt; 1 Apfel 20 TRUE #&gt; 2 Erdbeere 32 TRUE #&gt; 3 Banane 0 FALSE Dataframes können aber auch aus Listen erstellt werden. Dabei wird zuerst eine Liste erstellt, bei der jedes Element ein Vektor ist und stellt die Liste anschließend mit der Funktion as.data.frame() als Dataframe dar: # Dataframe aus einer Liste erstellen liste_von_vektoren &lt;- list(frucht = c(&quot;Apfel&quot;, &quot;Erdbeere&quot;, &quot;Banane&quot;), anzahl = c(20, 32, 0), vorraetig = c(TRUE, TRUE, FALSE) ) fruechte_df &lt;- as.data.frame(liste_von_vektoren) print(fruechte_df) #&gt; frucht anzahl vorraetig #&gt; 1 Apfel 20 TRUE #&gt; 2 Erdbeere 32 TRUE #&gt; 3 Banane 0 FALSE Dataframes können auch aus Matrizen erstellt werden, zum Beispiel aus unserer Matrix fruechte_einkauf: # Dataframe aus Matrix erstellen fruechte_einkauf &lt;- matrix(c(&quot;Birne&quot;, &quot;Orange&quot;, &quot;Banane&quot;, &quot;Kiwi&quot;, &quot;Apfel&quot;, &quot;Erdbeere&quot;), ncol = 2, dimnames = list(NULL, c(&quot;nicht_vorraetig&quot;, &quot;vorraetig&quot;))) fruechte_df &lt;- as.data.frame(fruechte_einkauf) fruechte_df #&gt; nicht_vorraetig vorraetig #&gt; 1 Birne Kiwi #&gt; 2 Orange Apfel #&gt; 3 Banane Erdbeere Allerdings sind in diesem Fall noch einige Operationen notwendig, um zusätzliche Informationen hinzuzufügen und den Dataframe in die gewünschte Form zu bringen. In unserem Beispiel wäre es sinnvoll, die Früchte in einer Spalte aufzulisten und für den Vorratsstatus wie in den Beispielen zuvor eine eigene Spalte anzulegen: # Dataframe mithilfe der Funktion stack() umformen fruechte_df &lt;- stack(fruechte_df) fruechte_df #&gt; values ind #&gt; 1 Birne nicht_vorraetig #&gt; 2 Orange nicht_vorraetig #&gt; 3 Banane nicht_vorraetig #&gt; 4 Kiwi vorraetig #&gt; 5 Apfel vorraetig #&gt; 6 Erdbeere vorraetig # Elemente in Spalte ind in Booleans umwandeln fruechte_df$ind &lt;- fruechte_df$ind == &quot;vorraetig&quot; # Auf dieselbe Weise kann auch eine neue Spalte hinzugefügt werden # fruechte_df$vorraetig &lt;- fruechte_df$ind == &quot;vorraetig&quot; # Alternativ mit ifelse-Anweisung (--&gt; nächste Woche!) # fruechte_df$ind &lt;- ifelse(fruechte_df$ind == &quot;vorraetig&quot;, TRUE, FALSE) fruechte_df #&gt; values ind #&gt; 1 Birne FALSE #&gt; 2 Orange FALSE #&gt; 3 Banane FALSE #&gt; 4 Kiwi TRUE #&gt; 5 Apfel TRUE #&gt; 6 Erdbeere TRUE Der Dataframe ist immer noch nicht ideal. Zum Beispiel sind die Spaltennamen nicht besonders intuitiv und sollten lieber umbenannt werden, und es fehlt noch die Spalte anzahl mit der Anzahl der vorrätigen Früchte. Im folgenden Abschnitt werden Operationen zum Zugriff und zur Transformation von Dataframes vorgestellt, mit denen solche Umformungen umgesetzt werden können. 2.7.2 Operationen auf Dataframes Spalten umbenennen: # Option 1 colnames(fruechte_df) &lt;- c(&quot;frucht&quot;, &quot;vorraetig&quot;) # Option 2 fruechte_df$values &lt;- fruechte_df$frucht fruechte_df$ind &lt;- fruechte_df$vorraetig Spalte hinzufügen: fruechte_df$anzahl &lt;- c(0, 0, 0, 5, 20, 32) fruechte_df #&gt; frucht vorraetig anzahl #&gt; 1 Birne FALSE 0 #&gt; 2 Orange FALSE 0 #&gt; 3 Banane FALSE 0 #&gt; 4 Kiwi TRUE 5 #&gt; 5 Apfel TRUE 20 #&gt; 6 Erdbeere TRUE 32 Anordnung der Spalten ändern: fruechte_df &lt;- fruechte_df[c(&quot;frucht&quot;, &quot;anzahl&quot;, &quot;vorraetig&quot;)] fruechte_df #&gt; frucht anzahl vorraetig #&gt; 1 Birne 0 FALSE #&gt; 2 Orange 0 FALSE #&gt; 3 Banane 0 FALSE #&gt; 4 Kiwi 5 TRUE #&gt; 5 Apfel 20 TRUE #&gt; 6 Erdbeere 32 TRUE Zugriff auf eine Spalte über den Namen der Spalte: # Option 1 fruechte_df$frucht #&gt; [1] &quot;Birne&quot; &quot;Orange&quot; &quot;Banane&quot; &quot;Kiwi&quot; &quot;Apfel&quot; &quot;Erdbeere&quot; # Option 2 fruechte_df[[&quot;frucht&quot;]] #&gt; [1] &quot;Birne&quot; &quot;Orange&quot; &quot;Banane&quot; &quot;Kiwi&quot; &quot;Apfel&quot; &quot;Erdbeere&quot; Zugriff auf eine Spalte über den Spaltenindex: fruechte_df[, 1] #&gt; [1] &quot;Birne&quot; &quot;Orange&quot; &quot;Banane&quot; &quot;Kiwi&quot; &quot;Apfel&quot; &quot;Erdbeere&quot; Zugriff auf eine Zeile: fruechte_df[1, ] #&gt; frucht anzahl vorraetig #&gt; 1 Birne 0 FALSE Zugriff auf einzelne Elemente über den Spaltennamen und den Index der Zeile: # Zugriff auf Element in Spalte &quot;frucht&quot; und Zeile 3 fruechte_df$frucht[3] #&gt; [1] &quot;Banane&quot; # Zugriff auf Elemente in Spalte &quot;frucht&quot; und Zeilen 1 und 4 fruechte_df$frucht[c(1, 4)] #&gt; [1] &quot;Birne&quot; &quot;Kiwi&quot; # Zugriff auf Elemente in Spalte &quot;frucht&quot; und Zeilen 1 bis 4 fruechte_df$frucht[c(1:4)] #&gt; [1] &quot;Birne&quot; &quot;Orange&quot; &quot;Banane&quot; &quot;Kiwi&quot; Zugriff auf einzelne Elemente über den Spaltenindex und den Zeilenindex: # Zugriff auf das Element in Zeile 1 und Spalte 2 fruechte_df[1, 2] #&gt; [1] 0 Bedingter Zugriff auf Zeilen oder Elemente, die eine bestimmte Bedingung erfüllen: # Zugriff auf alle Zeilen, in denen in der Spalte anzahl der Wert 20 steht fruechte_df[fruechte_df$anzahl == 20, ] #&gt; frucht anzahl vorraetig #&gt; 5 Apfel 20 TRUE # Zugriff auf alle Elemente in der Spalte frucht, für die in der Spalte anzahl der Wert 20 steht fruechte_df$frucht[fruechte_df$anzahl == 20] #&gt; [1] &quot;Apfel&quot; # Zugriff auf alle Elemente in der Spalte frucht, für die in der Spalte anzahl ein Wert kleiner als 20 steht fruechte_df$frucht[fruechte_df$anzahl &lt; 20] #&gt; [1] &quot;Birne&quot; &quot;Orange&quot; &quot;Banane&quot; &quot;Kiwi&quot; Spalte entfernen: # hier auskommentiert, da wir die Spalte für unser Beispiel behalten wollen # fruechte_df$anzahl &lt;- NULL Zugriffsoperationen der Art fruechte_df$frucht[fruechte_df$anzahl == 20] und fruechte_df$frucht[fruechte_df$anzahl &lt; 20] sehen auf den ersten Blick unübersichtlich aus, aber hier passiert im Grunde genau dasselbe, was wir bereits vom bedingten Zugriff auf Vektoren kennen: Zunächst wird der Ausdruck in den eckigen Klammern ausgewertet. Da jede Spalte in einem Dataframe ein Vektor ist, wird dabei wieder der Mechanismus der Vektorisierung aktiviert und der Ausdruck wird zu einem logischen Vektor aus Wahrheitswerten evaluiert. In diesem Vektor steht TRUE, wenn ein Element in der Spalte fruechte_df$anzahl genau 20 bzw. kleiner als 20 ist, und FALSE sonst. Mit der Zugriffsoperation fruechte_df$frucht[] wird dann auf alle Elemente in der Spalte frucht zugegriffen, für die in der Spalte anzahl in derselben Zeile ein Wert genau 20 bzw. kleiner 20 steht. Da die Spalten eines Dataframes Vektoren sind, können auf die Spalten alle Operationen angewandt werden, die auch auf Vektoren angewandt werden können, zum Beispiel: fruechte_df$anzahl * 3 #&gt; [1] 0 0 0 15 60 96 Dataframes können auch kombiniert werden. Wir haben ja bereits beim Erstellen von Matrizen aus bereits existierenden Vektoren die Funktionen rbind() und cbind() verwendet. neue_fruechte &lt;- data.frame(frucht = c(&quot;Apfel&quot;, &quot;Zitrone&quot;, &quot;Mango&quot;), anzahl = c(20, 15, 0), vorraetig = c(TRUE, TRUE, FALSE) ) # Dataframes zeilenweise kombinieren rbind(fruechte_df, neue_fruechte) #&gt; frucht anzahl vorraetig #&gt; 1 Birne 0 FALSE #&gt; 2 Orange 0 FALSE #&gt; 3 Banane 0 FALSE #&gt; 4 Kiwi 5 TRUE #&gt; 5 Apfel 20 TRUE #&gt; 6 Erdbeere 32 TRUE #&gt; 7 Apfel 20 TRUE #&gt; 8 Zitrone 15 TRUE #&gt; 9 Mango 0 FALSE # Dataframes spaltenweise kombinieren cbind(fruechte_df, neue_fruechte) #&gt; frucht anzahl vorraetig frucht anzahl vorraetig #&gt; 1 Birne 0 FALSE Apfel 20 TRUE #&gt; 2 Orange 0 FALSE Zitrone 15 TRUE #&gt; 3 Banane 0 FALSE Mango 0 FALSE #&gt; 4 Kiwi 5 TRUE Apfel 20 TRUE #&gt; 5 Apfel 20 TRUE Zitrone 15 TRUE #&gt; 6 Erdbeere 32 TRUE Mango 0 FALSE Achtung: Beachtet, dass beim Zusammenfügen der beiden Dataframes Duplikate entstehen: In dem neuen Dataframe, der mit rbind() erstellt wurde, gibt es zweimal “Apfel”, obwohl sich alle Werte in der Zeile wiederholen. In dem neuen Dataframe, der mit cbind() erstellt wurde, wiederholen sich sogar die Spalten und alle Elemente im Dataframe df_2 werden noch einmal dupliziert. Das hat den Grund, dass cbind() nur Dataframes mit derselben Anzahl an Zeilen zusammenfügen kann. Um zwei Dataframes so zusammenzufügen, dass gleiche Zeilen nicht dupliziert werden und nur die neuen Zeilen und Spalten hinzugefügt werden, kann die Funktion merge() verwendet werden. # Dataframes kombinieren und dabei gleiche Spalten zusammenfügen neue_fruechte &lt;- data.frame(frucht = c(&quot;Apfel&quot;, &quot;Zitrone&quot;, &quot;Mango&quot;), anzahl = c(20, 15, 0), vorraetig = c(TRUE, TRUE, FALSE), preis = c(2.49, 1.49, .99) ) merge(fruechte_df, neue_fruechte, by=c(&quot;frucht&quot;,&quot;anzahl&quot;, &quot;vorraetig&quot;), all = TRUE) #&gt; frucht anzahl vorraetig preis #&gt; 1 Apfel 20 TRUE 2.49 #&gt; 2 Banane 0 FALSE NA #&gt; 3 Birne 0 FALSE NA #&gt; 4 Erdbeere 32 TRUE NA #&gt; 5 Kiwi 5 TRUE NA #&gt; 6 Mango 0 FALSE 0.99 #&gt; 7 Orange 0 FALSE NA #&gt; 8 Zitrone 15 TRUE 1.49 Im Laufe des Semesters werden wir einige weitere Möglichkeiten kennenlernen, wie Dataframes transformiert und kombiniert werden können. Verständnisfragen: Was gilt für alle Spalten eines Dataframes? Welchen Datentyp haben die Werte in der neuen Spalte vorraetig? Was passiert, wenn Werte beim Erstellen eines Dataframes fehlen? Löscht einen Wert und probiert es aus. Verwendet die Funktion View() um euch einen der Dataframes genauer anzusehen. Was passiert? 2.8 Auf einen Blick: Matrizen vs Arrays vs Dataframes In diesem Abschnitt werden die Unterschiede zwischen Matrizen, Arrays und Dataframes anhand eines Beispiels illustriert. Das Beispiel illustriert, wie Daten zu Temperaturmessungen in drei verschiedenen Städten an drei Tageszeiten mithilfe der verschiedenen Datenstrukturen organisiert werden können. # Array: Ein dreidimensionales Modell zur Speicherung von Temperaturdaten über eine Woche, gemessen zu verschiedenen Tageszeiten in verschiedenen Städten. # Ein 3x7x3 Array erstellen für 3 Städte, 7 Tage und 3 Tageszeiten temperature_array &lt;- array(sample(10:30, 63, replace = TRUE), dim = c(3, 7, 3)) dimnames(temperature_array) &lt;- list( Stadt = c(&quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;München&quot;), Tag = c(&quot;Mo&quot;, &quot;Di&quot;, &quot;Mi&quot;, &quot;Do&quot;, &quot;Fr&quot;, &quot;Sa&quot;, &quot;So&quot;), Zeit = c(&quot;Morgen&quot;, &quot;Mittag&quot;, &quot;Abend&quot;) ) print(temperature_array[,&quot;Mo&quot;, &quot;Morgen&quot;]) #&gt; Berlin Hamburg München #&gt; 29 21 15 print(temperature_array) #&gt; , , Zeit = Morgen #&gt; #&gt; Tag #&gt; Stadt Mo Di Mi Do Fr Sa So #&gt; Berlin 29 24 27 28 14 29 11 #&gt; Hamburg 21 17 12 25 30 12 14 #&gt; München 15 20 22 20 22 24 13 #&gt; #&gt; , , Zeit = Mittag #&gt; #&gt; Tag #&gt; Stadt Mo Di Mi Do Fr Sa So #&gt; Berlin 24 14 20 27 12 12 27 #&gt; Hamburg 18 20 19 19 25 29 14 #&gt; München 21 14 29 23 30 27 15 #&gt; #&gt; , , Zeit = Abend #&gt; #&gt; Tag #&gt; Stadt Mo Di Mi Do Fr Sa So #&gt; Berlin 20 18 18 16 25 18 10 #&gt; Hamburg 26 10 17 18 29 25 24 #&gt; München 27 15 29 22 10 23 18 # Matrix: Die Temperaturmessungen für alle Städte über eine Woche zu einer bestimmten Tageszeit. morning_temp_matrix &lt;- matrix(temperature_array[ , , &quot;Morgen&quot;], nrow = 7) rownames(morning_temp_matrix) &lt;- c(&quot;Mo&quot;, &quot;Di&quot;, &quot;Mi&quot;, &quot;Do&quot;, &quot;Fr&quot;, &quot;Sa&quot;, &quot;So&quot;) colnames(morning_temp_matrix) &lt;- c(&quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;München&quot;) print(morning_temp_matrix) #&gt; Berlin Hamburg München #&gt; Mo 29 12 22 #&gt; Di 21 22 29 #&gt; Mi 15 28 12 #&gt; Do 24 25 24 #&gt; Fr 17 20 11 #&gt; Sa 20 14 14 #&gt; So 27 30 13 # Dataframe: Die Temperaturmessungen für alle Städte über eine Woche zu einer bestimmten Tageszeit. morning_temp_dataframe &lt;- data.frame( Berlin = temperature_array[&quot;Berlin&quot;, , &quot;Morgen&quot;], Hamburg = temperature_array[&quot;Hamburg&quot;, , &quot;Morgen&quot;], München = temperature_array[&quot;München&quot;, , &quot;Morgen&quot;] ) print(morning_temp_dataframe) #&gt; Berlin Hamburg München #&gt; Mo 29 21 15 #&gt; Di 24 17 20 #&gt; Mi 27 12 22 #&gt; Do 28 25 20 #&gt; Fr 14 30 22 #&gt; Sa 29 12 24 #&gt; So 11 14 13 # Der Dataframe sieht auf den ersten Blick genauso aus wie die Matrix. # Ein Dataframe kann aber zusätzliche Metadaten und Werte eines anderen Datentyps enthalten: morning_temp_dataframe$Zeit &lt;- &quot;Morgen&quot; morning_temp_dataframe$Skala &lt;- &quot;Celsius&quot; print(morning_temp_dataframe) #&gt; Berlin Hamburg München Zeit Skala #&gt; Mo 29 21 15 Morgen Celsius #&gt; Di 24 17 20 Morgen Celsius #&gt; Mi 27 12 22 Morgen Celsius #&gt; Do 28 25 20 Morgen Celsius #&gt; Fr 14 30 22 Morgen Celsius #&gt; Sa 29 12 24 Morgen Celsius #&gt; So 11 14 13 Morgen Celsius # Wenn wir dasselbe mit der Matrix versuchen, bekommen wir dagegen eine Warnmeldung, und einen wenig sinnvollen Output: morning_temp_matrix$Zeit &lt;- &quot;Morgen&quot; #&gt; Warning in morning_temp_matrix$Zeit &lt;- &quot;Morgen&quot;: Coercing LHS to a list # Auf die Werte in einem Dataframe können auch komplexere Operationen angewandt werden, und die Ergebnisse der Opterationen kann direkt im Dataframe gespeichert werden. # Wir können zum Beispiel das Maximum für jeden Tag berechenen und eine neue Spalte &quot;Maximum&quot; für diesen Wert übertragen morning_temp_dataframe$Maximum &lt;- pmax(morning_temp_dataframe$Berlin, morning_temp_dataframe$Hamburg, morning_temp_dataframe$München) morning_temp_dataframe #&gt; Berlin Hamburg München Zeit Skala Maximum #&gt; Mo 29 21 15 Morgen Celsius 29 #&gt; Di 24 17 20 Morgen Celsius 24 #&gt; Mi 27 12 22 Morgen Celsius 27 #&gt; Do 28 25 20 Morgen Celsius 28 #&gt; Fr 14 30 22 Morgen Celsius 30 #&gt; Sa 29 12 24 Morgen Celsius 29 #&gt; So 11 14 13 Morgen Celsius 14 # Wir könnten auch die Werte in Fahrenheit umwandeln morning_temp_dataframe$Maximum &lt;- morning_temp_dataframe$Maximum * 9/5 + 32 morning_temp_dataframe #&gt; Berlin Hamburg München Zeit Skala Maximum #&gt; Mo 29 21 15 Morgen Celsius 84.2 #&gt; Di 24 17 20 Morgen Celsius 75.2 #&gt; Mi 27 12 22 Morgen Celsius 80.6 #&gt; Do 28 25 20 Morgen Celsius 82.4 #&gt; Fr 14 30 22 Morgen Celsius 86.0 #&gt; Sa 29 12 24 Morgen Celsius 84.2 #&gt; So 11 14 13 Morgen Celsius 57.2 #... und anschließend die Spalte umbenennen morning_temp_dataframe$Maximum_Fahrenheit &lt;- morning_temp_dataframe$Maximum morning_temp_dataframe$Maximum &lt;- NULL # entfernt die ursprüngliche &quot;Maximum&quot; Spalte morning_temp_dataframe #&gt; Berlin Hamburg München Zeit Skala Maximum_Fahrenheit #&gt; Mo 29 21 15 Morgen Celsius 84.2 #&gt; Di 24 17 20 Morgen Celsius 75.2 #&gt; Mi 27 12 22 Morgen Celsius 80.6 #&gt; Do 28 25 20 Morgen Celsius 82.4 #&gt; Fr 14 30 22 Morgen Celsius 86.0 #&gt; Sa 29 12 24 Morgen Celsius 84.2 #&gt; So 11 14 13 Morgen Celsius 57.2 # Zur Datenmanipulation werden wir deswegen meist mit Dataframes zu tun haben. 2.9 Datenstrukturen untersuchen Jetzt haben wir schon ganz schön viele verschiedene Datenstrukturen kennengelernt, da kommt man leicht durcheinander. Letzte Woche haben wir bereits die typeof()-Funktion kennengelernt, um den Datentyp eines Werts herauszufinden. Wenn die Funktion typeof() auf Datenstrukturen angewandt wird, gibt die Funktion Auskunft darüber, wie die Datenstruktur im Speicher abgebildet wird. Ein Dataframe wird im Speicher zum Beispiel immer als Liste repräsentiert: typeof(morning_temp_dataframe) #&gt; [1] &quot;list&quot; Aber wir haben bereits gesehen, dass sich ein Dataframe von einer einfachen Liste unterscheidet. Die Spalten in einem Dataframe müssen immer dieselbe Länge haben und auf Dataframes können andere Funktionen angewandt werden als auf Listen. Um Informationen über die Datenstruktur eines Objekts auf höherer Ebene zu erhalten, kann die Funktion class() verwendet werden: class(morning_temp_dataframe) #&gt; [1] &quot;data.frame&quot; Neben typeof() und class() gibt es noch eine dritte Funktion, mit der die Datenstruktur eines Objekts untersucht werden kann. Die Funktion str() gibt Auskunft über die interne Struktur des Objekts: str(morning_temp_dataframe) #&gt; &#39;data.frame&#39;: 7 obs. of 6 variables: #&gt; $ Berlin : int 29 24 27 28 14 29 11 #&gt; $ Hamburg : int 21 17 12 25 30 12 14 #&gt; $ München : int 15 20 22 20 22 24 13 #&gt; $ Zeit : chr &quot;Morgen&quot; &quot;Morgen&quot; &quot;Morgen&quot; &quot;Morgen&quot; ... #&gt; $ Skala : chr &quot;Celsius&quot; &quot;Celsius&quot; &quot;Celsius&quot; &quot;Celsius&quot; ... #&gt; $ Maximum_Fahrenheit: num 84.2 75.2 80.6 82.4 86 84.2 57.2 Die Funktion typeof() kann natürlich auch auf einzelne Elemente in einer Datenstruktur angewandt werden: # Jedes Element hat in einer Matrix hat den Datentyp character typeof(fruechte_einkauf[1, 1]) # character #&gt; [1] &quot;character&quot; # Jede Spalte in einem Dataframe ist ein Vektor typeof(morning_temp_dataframe[3, ]) #&gt; [1] &quot;list&quot; # Jede Zeile in einem Dataframe ist eine Liste typeof(morning_temp_dataframe[, 3]) #&gt; [1] &quot;integer&quot; Zuletzt gibt es eine Reihe hilfreicher Funktionen, mit denen Datenstrukturen auf bestimmte Aspekte hin untersucht werden können. length() liefert die Anzahl der Elemente in einer Datenstruktur; nchar() gibt die Anzahl der Zeichen in einer Zeichenkette aus. ncol() und nrow() geben Auskunft über die Anzahl an Spalten und Zeilen in einer Datenstruktur und die bereits bekannte Funktion dim() liefert die Dimension. Für Datenstrukturen mit numerischen Werten kann zusätzlich auch das Minimum, das Maximum oder statistische Maße wie der Median oder das arithmetische Mittel bestimmt werden, und zwar mit den Funktionen min(), max(), median(), mean(). Verständnisfragen: Untersucht die Datenstrukturen aus diesem Kapitel mithilfe der Funktionen typeof(), class(), length(), nchar(), ncol(), nrow() und dim(). Was für ein Wert wird ausgegeben, wenn length() auf einen Dataframe angewendet wird? Wie hängen ncol(), nrow() und dim() zusammen? Haben Dataframes auch eine Dimension? Ruft mit ?dim die Dokumentation zur Funktion dim() auf und lest es nach. 2.10 Fehlende und ungültige Werte in Datenstrukturen Bei der Arbeit mit Daten in R kommt es immer mal vor, dass Werte fehlen oder ungültig sind. In R gibt es spezielle Objekte, die in diesem Fall eingesetzt werden. Der Wert NULL wird eingesetzt, um die Nicht-Existenz von Daten zu signalisieren. Das haben wir gesehen, als wir mithilfe der Funktion c() einen leeren Vektor erstellt haben. NULL wird außerdem dazu verwendet, um Werte aus Listen oder Dataframes zu entfernen. Wir haben dieses Objekt beispielsweise verwendet, um die Spalte Maximum aus dem Dataframe morning_temp_dataframe zu entfernen. Daneben gibt es NA, was für Not Available oder “nicht verfügbar” steht und verwendet wird, um das Fehlen von erwarteten Werten in Datenstrukturen zu markieren. Dieser Wert kommt typischerweise in Dataframes zur Anwendung, wenn zu einigen Beobachtungen bestimmte Werte fehlen, zum Beispiel das Alter einer Person in einem Dataframe, der Daten zu verschiedenen Personen enthält. Zuletzt gibt es den Wert NaN, welcher für Not a Number oder “keine Zahl” steht und signalisiert, dass das Ergebnis einer Berechnung eine undefinierte Zahl ist oder eine Zahl, die nicht repräsentiert werden kann. Ein Beispiel ist das Ergebnis der Operation 0/0. 2.11 Der Mitgliedschaftsoperator %in% Am Anfang haben wir Datenstrukturen als strukturierte Sammlungen von Werten (oder anderen Objekten) definiert. Um schnell herauszufinden, ob sich ein Wert in einer Datenstruktur befindet, kann ein spezieller Operator verwendet werden: der sogenannte Migliedschaftsoperator %in%. Dieser Operator wird auf Vektoren angewendet: Entweder auf einzelne Vektoren oder auf Vektoren innerhalb einer anderen Datenstruktur, also zum Beispiel auf die Spalten eines Dataframes oder Listenelemente, die Vektoren sind. Ein paar Beispiele: buchstaben &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;f&quot;, &quot;s&quot;, &quot;g&quot;) &quot;a&quot; %in% buchstaben #&gt; [1] TRUE # Es kann auch direkt nach der Mitgliedschaft mehrerer Elemente gefragt werden: c(&quot;a&quot;, &quot;f&quot;, &quot;b&quot;) %in% buchstaben #&gt; [1] TRUE TRUE TRUE # Mitgliedschaftsoperator auf Elemente einer Liste anwenden obstpreise &lt;- list(obst=c(&quot;Apfel&quot;, &quot;Banane&quot;, &quot;Orange&quot;), preise=c(2.45, 2.99, 1.99)) &quot;Orange&quot; %in% obstpreise$obst #&gt; [1] TRUE 2.12 Unveränderbarkeit von Objekten in R Wir haben in der vergangenen Woche besprochen, dass bei der Zuweisung einer Variable ein Wert zugeordnet wird, indem ein Name festgelegt wird, der fortan für diesen Wert und für den Speicherplatz, in dem er gespeichert ist, steht. Der Name ist also sowas wie eine Referenz zu diesem Wert. Aber was passiert eigentlich, wenn der Wert im Programmverlauf verändert wird? Dieser Frage gehen wir an einem Beispiel nach. Wir weisen zunächst einer Variable x einen Vektor c(1, 2, 3) als Wert zu: x &lt;- c(1, 2, 3) Die folgende Grafik aus dem Buch “Advanced R” von Hadley Wickham illustriert, was bei der Zuweisungsoperation passiert: Figure 2.2: Hadley Wickham (2019), https://adv-r.hadley.nz/names-values.html#binding-basics Der Name x referenziert also nach der Zuweisung einen Vektor mit den Elementen 1, 2 und 3. Die graue Zahl 0x74b steht für die Adresse des Speicherplatzes, der im Computer für das Objekt (den Vektor) “reserviert” ist. Wenn die Variable x einer neuen Variable y zugewiesen wird, dann referenziert auch der Name y denselben Wert, es entsteht zunächst also keine Kopie des Werts c(1, 2, 3): y &lt;- x Figure 2.3: Hadley Wickham (2019), https://adv-r.hadley.nz/names-values.html#binding-basics Aber was passiert mit der Variable x, wenn die Variable y verändert wird? Oder, korrekter formuliert: Welchen Wert referenziert x, wenn mithilfe von y auf den der Wert c(1, 2, 3) zugegriffen und ein Element verändert wird? x &lt;- c(1, 2, 3) y &lt;- x y[3] &lt;- 4 x #&gt; [1] 1 2 3 y wird zwar verändert, aber x nicht! Der Wert, der mit y verknüpft ist, wurde verändert, aber das ursprüngliche Objekt nicht. Stattdessen wurde ein neues Objekt erstellt, das eine Kopie des ursprünglichen Objekts mit dem veränderten Wert ist. Figure 2.4: Hadley Wickham (2019), https://adv-r.hadley.nz/names-values.html#binding-basics Dieses Verhalten liegt daran, dass R Objekte unveränderbar, oder auf Englisch immutable sind. Das bedeutet: Wenn wir in R den Wert einer Variable ändern wollen, z.B. x &lt;- x + 1, dann wird tatsächlich ein neues Objekt erstellt und x wird nun auf den neuen Speicherplatz, der den neuen Wert enthält, verwiesen. Der alte Speicherplatz wird freigegeben, wenn keine andere Variable darauf verweist. Bei der Manipulation von Objekten sollte man also dieses Prinzip der Unveränderbarkeit (Immutability) im Hinterkopf behalten, denn hier unterscheidet sich R von anderen Programmiersprachen wie beispielsweise Python. Diese Beispiele und alle Erklärungen auf Englisch könnt ihr auch nochmal im Kapitel “Binding basics” in Wickhams Lehrbuch “Advanced R” nachlesen. An diesem Punkt sollt ihr aber hauptsächlich das Prinzip der Unveränderbarkeit mal gehört haben; es ist nicht schlimm, wenn ihr den Vorgang nicht im Detail versteht. Quellen Venables, W.N. and Smith, D.M. and the R Core Team (2023). An Introduction to R, https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf Wickham, Hadley. The Tidyverse Style Guide, https://style.tidyverse.org/ Wickham, Hadley (2019). Advanced R. Chapter 4: Subsetting, https://adv-r.hadley.nz/subsetting.html Wickham, Hadley (2019). Advanced R. Chapter 2: Names and Values, https://adv-r.hadley.nz/names-values.html Phillips, Nathaniel D. (2018). Matrices and Dataframes, https://bookdown.org/ndphillips/YaRrr/matricesdataframes.html Phillips, Nathaniel D. (2018). Advanced Dataframe Manipulation, https://bookdown.org/ndphillips/YaRrr/advanceddataframe.html "],["r-basics-iii-kontrollstrukturen.html", "3 R Basics III: Kontrollstrukturen 3.1 Grundlegende Begriffe 3.2 Bedingte Anweisungen 3.3 Verzweigungen 3.4 while-Schleifen 3.5 for-Schleifen 3.6 Schleifen abbrechen Quellen", " 3 R Basics III: Kontrollstrukturen Bisher haben wir in unseren Beispielen immer einzelne Anweisungen oder Ausdrücke (-&gt; Grundbegriffe!) betrachtet. Wir haben dabei gelernt, dass der Computer Code ausführen und auswerten kann: Beim Ausführen “macht” er etwas und ändert den Zustand des Speichers, zum Beispiel, wenn eine neue Variable erstellt wird. Beim Auswerten berechnet er etwas und liefert einen Wert, zum Beispiel, wenn eine logische Aussage überprüft wird. Der Computer kann Anweisungen aber auch wiederholen oder Anweisungen nur dann ausführen, wenn eine bestimmte Bedingung erfüllt ist. In R gibt es eine Reihe von Signalwörtern, die dem Computer mitteilen, dass eine bestimmte Abfolge von Anweisungen (=Anweisungsblock) wiederholt werden soll oder nur unter einer bestimmten Bedingung ausgeführt werden soll. 3.1 Grundlegende Begriffe Begriff Englische Entsprechung Definition (im R-Kontext) Anweisungsblock Code block Mehrere aufeinanderfolgende Codezeilen, zum Beispiel im Körper einer Schleife oder einer bedingten Anweisung. Iteration Iteration Im Kontext von Kontrollstrukturen bezeichnet Iteration zwei Dinge: in einem allgemeinen Sinn den Prozess, bei dem Anweisungen wiederholt ausgeführt werden, und zum anderen einen einzigen Schleifendurchlauf, also das einmalige Ausführen der Anweisungen im Schleifenkörper. Wenn der Code einmal ausgeführt wird, sagt man entsprechend ‘eine Iteration’, für das zweimalige Ausführen ‘zwei Iterationen’, usw. Iterieren Iterate Wenn beschrieben werden soll, dass eine for-Schleife ein Objekt durchläuft, wird dazu häufig gesagt, dass die Schleife ‘über das Objekt iteriert’. Terminieren Terminate Wenn eine Schleife terminiert bedeutet das, dass sie die Ausführung beendet; sie kommt zum Ende. Style Tip In Funktionsaufrufen, also z.B. print(), und in Zugriffsoperationen, also z.B. var[], steht bekanntlich kein Leerzeichen vor der Klammer. Bei Kontrollstrukturen ist das anders. Hier empfiehlt Wickham, nach den Signalwörtern if, if else, for und while stets ein Leerzeichen einzufügen, also z.B. if (var == 20). 3.2 Bedingte Anweisungen Bedingte Anweisungen, oder if-Anweisungen, haben die allgemeine Form: if (Bedingung) { Anweisungsblock } if (Bedingung) { Anweisungsblock if (Bedingung) { Anweisungsblock } } Beispiel: # Nachricht wird ausgegeben, wenn der Vektor autos ein Element mit dem Wert &quot;Mercedes&quot; enthält autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos) { print(&quot;Ein Mercedes steht in der Garage!&quot;) } ## [1] &quot;Ein Mercedes steht in der Garage!&quot; # Nachricht wird ausgegeben, wenn der Wert, der dem Schlüssel &quot;Mercedes&quot; im Vektor autos zugeordnet ist, größer als 1 ist autos &lt;- c(Mercedes=2, Fiat=1, Volvo=1, BMW=3) anzahl_mercedes &lt;- autos[&quot;Mercedes&quot;] if (anzahl_mercedes &gt; 1) { print(paste(&quot;Du hast&quot;, anzahl_mercedes, &quot;Mercedes!&quot;)) } ## [1] &quot;Du hast 2 Mercedes!&quot; Mit der Funktion paste() können character verkettet werden. Dabei werden automatisch Leerzeichen zwischen den zu verkettenden charactern eingefügt. Wenn character ohne Leerzeichen verkettet werden sollen, kann stattdessen die Funktion paste0() verwendet werden. # Wenn der Vektor autos einen Schlüssel &quot;Mercedes&quot; enthält, wird überprüft, ob der Wert, der diesem Schlüssel zugeordnet ist, größer als 1 ist. # Falls ja, wird eine Nachricht ausgegeben. autos &lt;- c(Mercedes=2, Fiat=1, Volvo=1, BMW=3) if (&quot;Mercedes&quot; %in% names(autos)) { anzahl_mercedes &lt;- autos[&quot;Mercedes&quot;] if (anzahl_mercedes &gt; 1) { print(paste(&quot;Du hast&quot;, anzahl_mercedes, &quot;Mercedes!&quot;)) } } ## [1] &quot;Du hast 2 Mercedes!&quot; Verständnisfragen: Welche Datenstruktur hat das Objekt autos im zweiten und dritten Beispiel? Wie müsste man den Code im ersten Beispiel ändern, sodass eine Nachricht ausgegeben wird, wenn sowohl ein Mercedes als auch ein Fiat in der Garage stehen? Bedingungen können auch kombiniert werden. Dazu werden einfach zwei logische Ausdrücke mithilfe der logischen Operatoren &amp;&amp; und || verknüpft: # Beide Ausdrücke sind wahr: die Nachricht wird ausgegeben autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos &amp;&amp; &quot;Fiat&quot; %in% autos) { print(&quot;Ein Mercedes und ein Fiat stehen in der Garage!&quot;) } ## [1] &quot;Ein Mercedes und ein Fiat stehen in der Garage!&quot; # Einer der Ausdrücke ist falsch: es passiert nichts autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos &amp;&amp; &quot;Opel&quot; %in% autos) { print(&quot;Ein Mercedes und ein Opel stehen in der Garage!&quot;) } # Einer der Ausdrücke ist falsch: die Nachricht wird ausgegeben autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos || &quot;Opel&quot; %in% autos) { print(&quot;Ein Mercedes oder ein Opel steht in der Garage!&quot;) } ## [1] &quot;Ein Mercedes oder ein Opel steht in der Garage!&quot; 3.3 Verzweigungen Es wird unterschieden zwischen einfachen und mehrfachen Verzweigungen. Einfache Verzweigungen, oder if-else-Anweisungen, haben die allgemeine Form: if (Bedingung) { Anweisungsblock } else { Anweisungsblock } Beispiel: # Wenn der Wert, der dem Schlüssel &quot;Ibuprofen&quot; zugeordnet ist, größer 0 ist, wird eine Nachricht ausgegeben. # Wenn der Wert 0 (oder im theoretischen Fall kleiner 0) ist, wird eine Warnung ausgegeben. medikamente &lt;- c(Ibuprofen=30, Paracetamol=23, Aspirin=28) anzahl_ibus &lt;- medikamente[&quot;Ibuprofen&quot;] if (anzahl_ibus &gt; 0) { print(paste(&quot;Du hast&quot;, anzahl_ibus, &quot;Ibuprofen!&quot;)) } else { print(&quot;Warnung: kein Ibuprofen mehr da!&quot;) } ## [1] &quot;Du hast 30 Ibuprofen!&quot; Wenn mehr als zwei Fälle überprüft werden sollen, kann eine if-else-Anweisung mit beliebig vielen zusätzlichen bedingten Anweisungen kombiniert werden. Mehrfache Verzweigungen haben die allgemeine Form: if (Bedingung) { Anweisungsblock } else if (Bedingung) { Anweisungsblock } else { Anweisungsblock } # Wenn der Wert, der dem Schlüssel &quot;Ibuprofen&quot; zugeordnet ist, größer als 5 ist, wird eine Nachricht mit dem Wert ausgegeben. # Wenn der Wert genau dem Integer 5 entspricht, wird eine Warnung ausgegeben. # In allen anderen Fällen wird die Nachricht &quot;Achtung! Weniger als 5 Ibuprofen da!&quot; ausgegeben. medikamente &lt;- c(Ibuprofen=30, Paracetamol=23, Aspirin=28) anzahl_ibus &lt;- medikamente[&quot;Ibuprofen&quot;] if (anzahl_ibus &gt; 5) { print(paste(&quot;Du hast&quot;, anzahl_ibus, &quot;Ibuprofen!&quot;)) } else if (anzahl_ibus == 5) { print(&quot;Warnung: Nur noch 5 Ibuprofen da!&quot;) } else { print(&quot;Achtung! Weniger als 5 Ibuprofen da!&quot;) } ## [1] &quot;Du hast 30 Ibuprofen!&quot; Verständnisfragen: Wann wird der Anweisungsblock nach else ausgeführt? Welche Bedingung muss erfüllt sein? Achtung: Wenn zwei Bedingungen in einer Verzweigung zugleich erfüllt sind, wird nur die bedingte Anweisung ausgeführt, die zuerst überprüft wurde, die also “weiter oben” im Skript steht. Zur Illustration schauen wir uns nochmal unser Auto-Beispiel an. # Sowohl die if-Bedingung als auch die if else-Bedingung werden zu True evaluiert. # Allerdings wird die if else-Bedingung nie ausgewertet. # Es wird also nur die if-Anweisung ausgeführt. autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos) { print(&quot;Ein Mercedes steht in der Garage!&quot;) } else if (&quot;Fiat&quot; %in% autos) { print(&quot;Ein Fiat steht in der Garage!&quot;) } else { print(&quot;Weder ein Mercedes noch ein Fiat in der Garage.&quot;) } ## [1] &quot;Ein Mercedes steht in der Garage!&quot; Dieses Verhalten gilt allerdings nur für Verzweigungen, nicht jedoch für zwei if-Anweisungen, die aufeinander folgen: # Beide if-Bedingungen werden nacheinander ausgewertet. Im ersten Schleifendurchlauf # werden beide zu True evaluiert und es werden beide Anweisungen ausgeführt. autos &lt;- c(&quot;Mercedes&quot;, &quot;Fiat&quot;, &quot;Volvo&quot;, &quot;BMW&quot;) if (&quot;Mercedes&quot; %in% autos) { print(&quot;Ein Mercedes steht in der Garage!&quot;) } ## [1] &quot;Ein Mercedes steht in der Garage!&quot; if (&quot;Fiat&quot; %in% autos) { print(&quot;Ein Fiat steht in der Garage!&quot;) } ## [1] &quot;Ein Fiat steht in der Garage!&quot; Eine spezielle Form von Verzweigung sind bedingte Ausdrücke. Diese werden verwendet, um einer Variable in Abhängigkeit von einer anderen Variable einen Wert zuzuweisen. Bedingte Ausdrücke stellen eine Kurzschreibweise für die folgende Verzweigung dar: # Kompliziert x &lt;- 2 if (x == 2) { var &lt;- 10 } else { var &lt;- 20 } # Einfach x &lt;- 2 var &lt;- if (x == 2) 10 else 20 # Alternative (macht dasselbe): Die ifelse-Funktion var &lt;- ifelse(x == 2, 10, 20) 3.4 while-Schleifen while-Schleifen werden verwendet, wenn ein Code-Block (=nur ein anderes Wort für Anweisungsblock) so lange ausgeführt werden soll, wie eine bestimmte Bedingung erfüllt ist. Die Bedingung steht im Schleifenkopf und wird überprüft, bevor der Code im Schleifenkörper ausgeführt wird. Wenn die Bedingung nicht (mehr) erfüllt ist, terminiert die Schleife. while-Schleifen haben die allgemeine Form: while (Bedingung) { Anweisungsblock } Beispiel: # In jedem Schleifendurchlauf wird zunächst der Ausdruck anzahl_ibus &gt; 0 ausgewertet. # Wenn der Ausdruck zu True evaluiert wird, wird die Anweisung im Schleifenkörper ausgeführt, d.h. der Wert der Variable anzahl_ibus wird um 1 verringert. # Wenn die Variable anzahl_ibus den Wert 0 annimmt, wird der Ausdruck im Schleifenkopf zu False evaluiert und die Schleife terminiert. # Nach dem Terminieren der Schleife wird eine Warnung ausgegeben. medikamente &lt;- c(Ibuprofen=30, Paracetamol=23, Aspirin=28) anzahl_ibus &lt;- medikamente[&quot;Ibuprofen&quot;] while (anzahl_ibus &gt; 0) { anzahl_ibus &lt;- anzahl_ibus - 1 } print(&quot;Warnung: kein Ibuprofen mehr da!&quot;) ## [1] &quot;Warnung: kein Ibuprofen mehr da!&quot; Verständnisfragen: Nach wie vielen Schleifendurchläufen wird die Meldung “Achtung! Kein Ibuprofen mehr da!” ausgegeben? Nach wie vielen Schleifendurchläufen terminiert die Schleife? Es ist auch möglich, while-Schleifen und bedingte Anweisungen zu kombinieren: # In jedem Schleifendurchlauf wird zunächst der Ausdruck anzahl_ibus &gt; 0 ausgewertet. # Wenn der Ausdruck zu True evaluiert wird, wird überprüft, ob der Wert dem Integer 5 entspricht. # Falls ja, wird eine Warnmeldung ausgegeben. # Danach wird der Wert der Variable anzahl_ibus um 1 verringert. # Wenn die Variable anzahl_ibus den Wert 0 annimmt, wird der Ausdruck im Schleifenkopf zu False evaluiert und die Schleife terminiert. # Nach dem Terminieren der Schleife wird eine weitere Warnung ausgegeben. medikamente &lt;- c(Ibuprofen=30, Paracetamol=23, Aspirin=28) anzahl_ibus &lt;- medikamente[&quot;Ibuprofen&quot;] while (anzahl_ibus &gt; 0) { if (anzahl_ibus == 5) { print(&quot;Warnung: nur noch 5 Ibuprofen da!&quot;) } anzahl_ibus &lt;- anzahl_ibus - 1 } ## [1] &quot;Warnung: nur noch 5 Ibuprofen da!&quot; print(&quot;Achtung! Kein Ibuprofen mehr da!&quot;) ## [1] &quot;Achtung! Kein Ibuprofen mehr da!&quot; Verständnisfrage: Wir wollen sichergehen, dass die Warnung wirklich im 26. Schleifendurchlauf ausgegeben wird. Wie könnten wir den Code ändern, damit in jedem Schleifendurchgang zusätzlich ein Wert ausgegeben wird? Achtung: while-Schleifen laufen unendlich lange, wenn die Abbruchbedingung nie erfüllt ist: # while (TRUE) { # print(&quot;Dies ist eine unendliche Schleife&quot;) #} Falls ihr versehentlich doch mal eine unendliche Schleife im RStudio ausgeführt haben solltet, könnt ihr die Ausführung der Schleife im RStudio abbrechen. Dazu könnt ihr entweder auf das rote Stopp-Zeichen oben rechts im Konsole-Fenster klicken oder ihr gebt dir Tastenkombination CTRL + C (Mac) bzw. Escape (Windows) ein. 3.5 for-Schleifen for-Schleifen werden verwendet, um iterierbare Objekte zu durchlaufen. Listen und Vektoren sind in R iterierbar; und weil Matrizen und Dataframes aus Vektoren bzw. Listen bestehen, sind auch Matrizen und Dataframes iterierbar. Iterieren bedeutet einfach “durchlaufen”. Im Kopf der for-Schleife steht anders als bei der while-Schleife keine Bedingung, sondern es wird eine Variable festgelegt, die als Platzhalter für den Wert der Elemente des Objekts dient. Diese Variable nennt man auch Laufvariable. Die for-Schleife “durchläuft” also im Grunde das Objekt, indem in jedem Schleifendurchlauf die Laufvariable den Wert des aktuellen Elements annimmt – und das so lange, bis es keine weiteren Elemente mehr gibt. Mithilfe des Variablennamens kann im Schleifenkörper auf den Wert des aktuellen Elements zugegriffen werden. Einen Schleifendurchlauf nennt man auch eine Iteration. for-Schleifen haben in R die allgemeine Form: for (Element in Objekt) { Anweisungsblock } Beispiel: # In jedem Schleifendurchlauf nimmt die Laufvariable zahl den Wert eines Elements aus dem # Vektor zahlen an und es wird der aktuelle Wert der Variable zahl, addiert mit 1, ausgegeben. woerter &lt;- c(&quot;Netzwerkdurchsetzungsgesetz&quot;, &quot;Abfallverzeichnisverordnung&quot;, &quot;Haftpflichtversicherung&quot;, &quot;Antivirenprogramm&quot;) for (wort in woerter) { print(paste(wort, nchar(wort))) } ## [1] &quot;Netzwerkdurchsetzungsgesetz 27&quot; ## [1] &quot;Abfallverzeichnisverordnung 27&quot; ## [1] &quot;Haftpflichtversicherung 23&quot; ## [1] &quot;Antivirenprogramm 17&quot; Mithilfe der Funktion nchar() kann die Anzahl der Zeichen in einer Zeichenkette (=character) bestimmt werden. Wie while-Schleifen können auch for-Schleifen mit bedingten Anweisungen kombiniert werden: # In jedem Schleifendurchlauf nimmt die Laufvariable wort den Wert eines Elements aus dem Vektor woerter (s.o.) an. # Zunächst wird die Zeichenanzahl des aktuellen Strings der Variable laenge als Wert zugewiesen. # Dann wird geprüft, ob der Wert der Variable zeichen größer als 20 ist. # Falls ja, wird der Liste lange_woerter ein Element mit dem aktuellen Wert der Variable wort als Schlüssel und der Zeichenanzahl als Wert hinzugefügt. # Wenn der Vektor woerter keine weiteren Elemente mehr enthält, terminiert die Schleife. # Danach wird die Liste lange_woerter ausgegeben. woerter &lt;- c(&quot;Netzwerkdurchsetzungsgesetz&quot;, &quot;Abfallverzeichnisverordnung&quot;, &quot;Haftpflichtversicherung&quot;, &quot;Antivirenprogramm&quot;) lange_woerter &lt;- list() for (wort in woerter) { zeichen &lt;- nchar(wort) if (zeichen &gt; 20) { lange_woerter[[wort]] &lt;- zeichen } } print(lange_woerter) ## $Netzwerkdurchsetzungsgesetz ## [1] 27 ## ## $Abfallverzeichnisverordnung ## [1] 27 ## ## $Haftpflichtversicherung ## [1] 23 Es muss jedoch beachtet werden, dass Elemente eines iterierbaren Objekts im Laufe einer Iteration nicht direkt verändert werden können: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) for (tier in tiere) { tier &lt;- tolower(tier) } # Änderungen wurden nicht übernommen print(tiere) ## [1] &quot;Hund&quot; &quot;Elefant&quot; &quot;Igel&quot; &quot;Katze&quot; Mithilfe der Funktion tolower() können Buchstaben in einer Zeichenkette (=character) automatisch in Kleinbuchstaben umgewandelt werden. Das liegt daran, dass die Laufvariable nur für den Wert des aktuellen Elements steht, nicht für dieses Element selbst. Die Laufvariable haben wir also eigentlich bisher als “Wertvariable” verwendet. Um Elemente im Schleifendurchlauf zu verändern, muss mithilfe der Indexposition direkt auf ein Element aus dem Vektor oder der Liste zugegriffen werden, also genau so, wie wir bisher auch auf Elemente zugegriffen haben. Doch mit jedem Schleifendurchlauf nimmt die Laufvariable ja den Wert eines anderen Elements an; die Indexposition des aktuellen Elements ändert sich also fortlaufend. Um auf Elemente in einem Schleifendurchlauf zuzugreifen, brauchen wir also eine Variable, die nicht den Wert des aktuellen Elements annimmt, sondern dessen Indexposition. for-Schleifen werden deswegen in R meist als sogennante Zählschleife verwendet. Dazu wird die Funktion seq_along() verwendet, die einen Integer-Vektor erstellt, der genau so lang ist, wie das Objekt, das der Funktion übergeben wird. Solche for-Schleifen haben die allgemeine Form: for (i in seq_along(Objekt)) { Anweisungsblock } Das i steht für iterator und dient als Zählvariable: mit jedem Schleifendurchlauf (Iteration) wird i um Eins erhöht; der Zählbeginn ist 1. In jeder Iteration wird auf das Element i des iterierbaren Objekts zugegriffen. Mithilfe des Iterators i kann also in jeder Iteration auf ein Element aus dem Objekt zugegriffen werden. Klingt kompliziert, wird aber am folgenden Beispiel direkt deutlich: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) for (i in seq_along(tiere)) { tiere[i] &lt;- tolower(tiere[i]) } # Änderungen wurden übernommen print(tiere) ## [1] &quot;hund&quot; &quot;elefant&quot; &quot;igel&quot; &quot;katze&quot; Verständnisfragen: Welchen Wert nimmt i im ersten Schleifendurchlauf an? Auf welches Element wird zugegriffen? Welchen Wert nimmt i im dritten Schleifendurchlauf an? Auf welches Element wird zugegriffen? Kann man eine for-Schleife auch dazu verwenden, um über die Spalten einer Matrix / eines Dataframes zu iterieren? Was macht die Funktion seq_along()? Wann empfiehlt es sich, seq_along() in Verbindung mit einer for-Schleife zu verwenden? Auch Zählschleifen können mit bedingten Anweisungen oder Verzweigungen kombiniert werden: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) for (i in seq_along(tiere)) { if (tiere[i] == &quot;Hund&quot;) { tiere[i] &lt;- tolower(tiere[i]) } else { tiere[i] &lt;- toupper(tiere[i]) } } # Änderungen wurden übernommen print(tiere) ## [1] &quot;hund&quot; &quot;ELEFANT&quot; &quot;IGEL&quot; &quot;KATZE&quot; Im Beispiel oben haben wir mehrmals tiere[i] verwendet. Falls wir uns irgendwann später dazu entscheiden sollten, die Variable tiere umzubenennen, müssten wir alle Vorkommnisse von tiere[i] im Schleifenkörper finden und austauschen. So entstehen schnell Fehler. Um das Problem zu umgehen, könnten wir jetzt auf die Idee kommen, eine “temporäre” Variable zu verwenden, der am Anfang jedes Schleifendurchlaufs das aktuelle Element zugewiesen wird: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) for (i in seq_along(tiere)) { tier &lt;- tiere[i] if (tier == &quot;Hund&quot;) { tier &lt;- tolower(tier) } else { tier &lt;- toupper(tier) } } # Änderungen wurden nicht übernommen! print(tiere) ## [1] &quot;Hund&quot; &quot;Elefant&quot; &quot;Igel&quot; &quot;Katze&quot; Aber wenn wir uns am Ende den Vektor tiere ausgeben lassen, sehen wir, dass wir den Vektor gar nicht verändert haben! Woran liegt das? Verständnisfragen: Warum wird der Vektor tiere durch das Einfügen einer temporären Variable nicht mehr verändert? Wie könnten wir den Code im Beispiel umschreiben, um das Problem zu beheben? Der Grund für dieses Verhalten liegt wieder in der Unveränderbarkeit der Objekte in R. Um das Problem zu beheben, gibt es verschiedene Möglichkeiten. Die Änderungen, die am Objekt tier vorgenommen wurden, könnten zum Beispiel am Ende der Schleife wieder dem Objekt tiere[i] zugewiesen werden: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) for (i in seq_along(tiere)) { tier &lt;- tiere[i] if (tier == &quot;Hund&quot;) { tier &lt;- tolower(tier) } else { tier &lt;- toupper(tier) } # Wert der Variable tier wieder dem Element tiere[i] zuweisen tiere[i] &lt;- tier } # Änderungen wurden übernommen! print(tiere) ## [1] &quot;hund&quot; &quot;ELEFANT&quot; &quot;IGEL&quot; &quot;KATZE&quot; Alternativ kann auch der ursprüngliche Vektor beibehalten werden und die Änderungen in jedem Schleifendurchgang einem neuen Vektor tiere_neu() hinzuzufügt werden. Dafür kann in diesem Fall eine einfache for-Schleife verwendet werden: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) tiere_neu &lt;- c() # leeren Vektor erstellen for (tier in tiere) { if (tier == &quot;Hund&quot;) { tier &lt;- tolower(tier) } else { tier &lt;- toupper(tier) } # Wert der Variable tier als neues Element dem Vektor tiere_neu hinzufügen tiere_neu &lt;- c(tiere_neu, tier) } print(tiere_neu) ## [1] &quot;hund&quot; &quot;ELEFANT&quot; &quot;IGEL&quot; &quot;KATZE&quot; print(tiere) # Vektor tiere ist unverändert ## [1] &quot;Hund&quot; &quot;Elefant&quot; &quot;Igel&quot; &quot;Katze&quot; 3.6 Schleifen abbrechen Es ist zudem möglich, einen Schleifendurchlauf (Iteration) oder die gesamte Schleife abhängig von einer Bedingung frühzeitig abzubrechen. Eine next-Anweisung kann verwendet werden, um den aktuellen Schleifendurchlauf abzubrechen und direkt zum Schleifenkopf zu springen (= Iterationsabbruch). Eine break-Anweisung wird verwendet, um die Schleife komplett abzubrechen (= Schleifenabbruch). Das kann nützlich sein, wenn man fehlende Werte in einem Objekt hat und diese überspringen möchte, damit es zu keiner Fehlermeldung kommt. Die Signalworte next und break können sowohl mit while-Schleifen als auch mit for-Schleifen verwendet werden. Hier ein Beispiel mit einer for-Schleife: # next Anweisung # Vektor mit NA-Werten beliebige_woerter &lt;- c(&quot;Baum&quot;, &quot;Wald&quot;, NA, &quot;Meer&quot;, NA, &quot;Sonne&quot;) # Funktion is.na() überprüft, ob der Wert des Elements wort NA ist for (wort in beliebige_woerter) { if (is.na(wort)) { next } else { print(wort) } } ## [1] &quot;Baum&quot; ## [1] &quot;Wald&quot; ## [1] &quot;Meer&quot; ## [1] &quot;Sonne&quot; # break Anweisung # Vektor mit NA-Werten beliebige_woerter &lt;- c(&quot;Baum&quot;, &quot;Wald&quot;, NA, &quot;Meer&quot;, NA, &quot;Sonne&quot;) # Funktion is.na() überprüft, ob der Wert des Elements wort NA ist for (wort in beliebige_woerter) { if (is.na(wort)) { break } else { print(wort) } } ## [1] &quot;Baum&quot; ## [1] &quot;Wald&quot; Schleifen in R Für die meisten Anwendungen verwendet man in R eher for-Schleifen als while-Schleifen. In vielen Fällen sind Schleifen aber sogar überhaupt nicht notwendig. In der nächsten Stunde werden wir sehen, dass Schleifen in vielen Fällen durch bestimmte Funktionen ersetzt werden können. Da R im Kern eine sogenannte “funktionale” Programmiersprache ist, werden Schleifen weniger verwendet als in anderen Programmiersprachen. Quellen Venables, W.N. and Smith, D.M. and the R Core Team. An Introduction to R, https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf Wickham, Hadley. The Tidyverse Style Guide, https://style.tidyverse.org/ Reussner, Ralf H. Mitschnitt zur Vorlesung “Programmieren” im WiSe 2015/2016. 03: Kontrollstrukturen, https://www.youtube.com/watch?v=-ZvrABPvUdA Wickham, Hadley and Grolemund, Garrett. R for Data Science: Iteration, https://r4ds.had.co.nz/iteration.html "],["r-basics-iv-funktionen-und-pakete.html", "4 R Basics IV: Funktionen und Pakete 4.1 Grundlegende Begriffe 4.2 Was sind Funktionen? 4.3 Funktionen definieren 4.4 Funktionen aufrufen 4.5 Funktionen verstehen 4.6 Wozu werden Funktionen verwendet? 4.7 Schleifen ersetzen mithilfe von Funktionen 4.8 Gültigkeit der Funktionsargumente überprüfen 4.9 Funktionsumgebung und Sichtbarkeitsbereich von Variablen 4.10 Was sind Pakete? 4.11 Pakete installieren 4.12 Pakete laden 4.13 Wozu werden Pakete verwendet? 4.14 Welche Pakete gibt es denn alles? Quellen", " 4 R Basics IV: Funktionen und Pakete Wir haben im Laufe der vergangenen Stunden bereits einige Funktionen kennengelernt, zum Beispiel die Ausgabe-Funktion print(), die Funktion c() zum Erstellen von Vektoren oder die Funktion paste() zum Verketten von character-Objekten. 4.1 Grundlegende Begriffe Begriff Englische Entsprechung Definition (im R-Kontext) Aufrufen Call Wenn die Anweisungen, die in einer Funktion definiert sind, ausgeführt werden, sagt man, dass die Funktion aufgerufen wird. Beim Aufruf können der Funktion Argumente übergeben werden, also Werte, die für die Parameter aus der Funktionsdefinition eingesetzt werden. Zurückgeben Return Funktionen haben einen Rückgabewert, das heißt, sie liefern beim Ausführen einen Wert, der das Ergebnis der Funktion darstellt und der weiterverwendet werden kann. Beim Aufruf einiger Funktionen wird nur etwas auf dem Bildschirm ausgegeben. Diese Funktionen haben meist den Rückgabewert NULL. 4.2 Was sind Funktionen? Funktionen sind wiederverwendbare Abfolgen von Anweisungen. Sie sind also Codeabschnitte, die mithilfe eines Namens wiederholt ausgeführt werden können. Das Prinzip ist also ein bisschen ähnlich wie Variablen, mit dem Unterschied, dass man mithilfe von Funktionsnamen auf Anweisungen zugreifen kann, während man mithilfe von Variablennamen auf Objekte zugreifen kann. Im Grunde sind Funktionsnamen aber auch zugleich Variablennamen, weil in R Funktionen auch Objekte sind (-&gt; Grundbegriffe: alles in R ist ein Objekt). Jede Funktion besteht aus vier Komponenten: Name (“name”) Parameter (“formals”: formale Parameter) Körper (“body”) Umgebung (“environemnt”) Funktionen werden aufgerufen. Beim Funktionsaufruf werden ihnen Argumente übergeben. Welche Argumente eine Funktion annehmen kann, wird in der Funktionsdefinition mithilfe von formalen Parametern festgelegt. Für Argumente sagt man deswegen auch manchmal tatsächliche Parameter. Funktionen geben immer einen Wert zurück, der heißt dann Rückgabewert. Der Rückgabewert kann in einer Funktionsdefinition mithilfe des Schlüsselworts return festgelegt werden. 4.3 Funktionen definieren Funktionsdefinitionen haben in R die allgemeine Form: mache_irgendwas &lt;- function(Parameter_1, Parameter_2, ...) { Anweisungsblock return(Rückgabewert) } Achtung: zwischen dem Schlüsselwort function und der runden Klammer steht KEIN Leerzeichen, anders als bei Kontrollstrukturen. mache_irgendwas ist der Funktionsname. Die Funktionsparameter heißen Parameter_1 und Parameter_2. Dabei handelt es sich um Variablennamen, die nur innerhalb der Funktionsdefinition verwendet werden und als Platzhalter für die Argumente dienen, die der Funktion beim Funktionsaufruf übergeben werden. Die formalen Parameter sind also ein bisschen ähnlich wie die Laufvariablen in for-Schleifen, die auch nur Platzhalter für die Elemente aus einem iterierbaren Objekt waren. Genau wie bei Kontrollstrukturen ist auch bei Funktionen der Funktionskörper alles, was zwischen den geschweiften Klammern steht, also ein Anweisungsblock und eine return-Anweisung. Im Anweisungsblock stehen irgendwelche Anweisungen, die irgendetwas mit den Parametern der Funktion machen, also im Grunde Verarbeitungsschritte für die Funktionsparameter. Im Laufe der Verarbeitung wird irgendeine Variable definiert, die das “Endergebnis” der Verarbeitung zwischenspeichert. Diese Variable wird dann mithilfe der return-Anweisung zurückgegeben, wenn die Funktion aufgerufen wird. Die return-Anweisung definiert also, welche Variable die Funktion als Rückgabewert beim Funktionsaufruf zurückgeben soll. Die Funktionsumgebung ist in der Funktionsdefinition nicht direkt sichtbar. Funktionsumgebungen lernen wir erst etwas später kennen und ignorieren sie erst einmal. Style Tip Für Funktionsnamen gelten fast die selben Konventionen wie für Variablennamen: Wickham empfiehlt, Funktionsnamen in Kleinbuchstaben zu schreiben und einen Unterstrich zu verwenden, um mehrere Wörter voneinander abzutrennen. Allerdings sollten Variablennamen immer irgendeine Operation beschreiben, während Variablennamen in der Regel Substantive sind. Dabei kann es sich auch um eine logische Operation handeln: ist_ungerade() wäre zum Beispiel ein passender Funktionsname für eine Funktion, die überprüft, ob ihr Argument eine ungerade Zahl ist. Ein Beispiel: increment_value &lt;- function(x) { x &lt;- x + 1 return(x) } Verständnisfragen: Was macht die Funktion increment_value()? Was ist der Körper der Funktion increment_value()? Was sind die formalen Parameter? Was ist der Rückgabewert? Anders als in anderen Programmiersprachen kann in R bei einer Funktionsdefinition die return()-Anweisung auch weggelassen werden. Dann wird automatisch der Ausdruck als Rückgabewert zurückgegeben, der im Funktionskörper zuletzt evaluiert wurde: # x + 1 wird &quot;implizit&quot; als Rückgabewert zurückgegeben, wenn die return-Anweisung fehlt increment_value &lt;- function(x) { x + 1 } Der Style Guide, nach dem wir uns richten, empfiehlt, return() nur für frühzeitige Rückgaben zu verwenden, also wenn eine Bedingung erfüllt ist und die Funktion an dieser Stelle beendet werden soll. Am Anfang empfiehlt es sich aber trotzdem, den Rückgabewert immer explizit mit return() anzugeben und an dieser Stelle vom Style Guide abzuweichen. Manchmal ist es sinnvoll, bei der Funktionsdefinition einen Default-Wert für einen oder mehrere Parameter anzugeben: # Funktion mit Default-Wert für einen Parameter add_values &lt;- function(x, y=10) { return(x + y) } Dieser Default-Wert wird dann beim Funktionsaufruf eingesetzt, falls kein Wert für den Parameter festgelegt wird. 4.4 Funktionen aufrufen Funktionsaufurfe haben in R die allgemeine Form: mache_irgendwas(Argument_1, Argument_2, ...) Wenn eine Funktion aufgerufen wird, dann werden die formalen Parameter aus der Funktionsdefinition durch die Argumente (also die tatsächlichen Parameter) ersetzt. Die Verarbeitungsschritte, die im Funktionskörper für die formalen Parameter definiert sind, werden dann mit den Argumenten ausgeführt. Bisher haben wir bereits oft Funktionen aufgerufen und ihnen Argumente übergeben. Zum Beispiel: print(&quot;Hallo&quot;) ## [1] &quot;Hallo&quot; tiere &lt;- c(&quot;Hund&quot;, &quot;Katze&quot;) paste0(tiere[1], &quot;e&quot;) ## [1] &quot;Hunde&quot; length(tiere) ## [1] 2 Wenn wir die Funktion increment_value(), die wir vorhin definiert haben, aufrufen wollen, gehen wir genauso vor: increment_value(3) ## [1] 4 Wenn eine Funktion aufgerufen wird, für deren Parameter in der Funktionsdefinition ein Standardwert festgelegt wurde, dann ist die Angabe eines Werts für diesen Parameter beim Funktionsaufruf optional: # addiert 2 mit dem Standardwert 10 add_values(2) ## [1] 12 # addiert 2 mit 5 add_values(2, 5) ## [1] 7 Verständnisfrage: Welche Argumente werden den Funktionen print(), c(), paste0(), length(), increment_value() und add_values jeweils beim Funktionsaufruf übergeben? In R sind Funktionen auch Objekte. Das heißt, dass eine Funtion als Argument einer anderen Funktion übergeben werden kann. 4.5 Funktionen verstehen Alle Funktionen sind in R gut dokumentiert. Wir haben die offizielle Dokumentation zu einzelnen Funktionen bereits mithilfe des ?-Operators aufgerufen. Funktionen sind in der R-Dokumentation immer nach demselben Schema dokumentiert: Description ist eine kurze Beschreibung davon, was die Funktion macht. Unter Usage steht, wir die Funktion aufgerufen werden kann. Arguments erläutert, welche Argumente der Funktion beim Funktionsaufruf übergeben werden können, und Value beschreibt den Rückgabewert, also welchen Datentyp der Wert hat, der von der Funktion nach der Ausführung aller Anweisungen im Funktionskörper zurückgegeben wird. Beispiel: Dokumentationsseite zur Funktion typeof() 4.6 Wozu werden Funktionen verwendet? Allgemein werden Funktionen verwendet… …um bestimmte Verarbeitungsschritte zu wiederholen, ohne Code ständig kopieren zu müssen. …um den Code weniger fehleranfällig zu machen: Wenn man den Code kopiert, kopiert man auch mögliche Fehler …um den Code effizienter zu machen: Wenn Funktionen verwendet werden, um Schleifen zu ersetzen, macht das den Code effizienter, das heißt, der Computer braucht weniger lange, um dieselben Berechnungen auszuführen Beispiel: Wir wollen herausfinden, wie oft jedes Wort in den Songtexten eine:r Künstler:in vorkommt. Dazu haben wir uns die folgende for-Schleife ausgedacht: lyrics &lt;- &quot;My mind won&#39;t let me rest Voice in my head I hear what it said I can&#39;t trust a thing If I picked up and left How fast did you forget? Resting while I&#39;m inside your presence I don&#39;t want to think nothing bad This time I won&#39;t This time I won&#39;t&quot; lyrics_vec &lt;- strsplit(lyrics, &quot; &quot;)[[1]] lyrics_freq &lt;- c() for (word in lyrics_vec) { if (!(word %in% names(lyrics_freq))) { lyrics_freq[word] &lt;- 1 } else { lyrics_freq[word] &lt;- lyrics_freq[word] + 1 } } print(lyrics_freq) ## My mind won&#39;t let me rest Voice in ## 1 1 3 1 1 1 1 1 ## my head I hear what it said can&#39;t ## 1 1 6 1 1 1 1 1 ## trust a thing If picked up and left ## 1 1 1 1 1 1 1 1 ## How fast did you forget? Resting while I&#39;m ## 1 1 1 1 1 1 1 1 ## inside your presence don&#39;t want to think nothing ## 1 1 1 1 1 1 1 1 ## bad This time ## 1 2 2 Verständnisfragen: Was macht die Funktion strsplit()? Welche Datenstruktur gibt die Funktion als Rückgabewert zurück? Gebt ?strsplit ein und schaut nach. Was passiert in jedem Schleifendurchlauf? Der named vector lyrics_vec enthält dasselbe Wort zweimal, wenn es einmal groß- und einmal kleingeschrieben wird, zum Beispiel “My” und “my”. In der letzten Stunde haben wir eine Funktion kennengelernt, die alle Großbuchstaben in einem Wort in Kleinbuchstaben umwandelt. Wie hieß die Funktion? Und wie könnten wir die Funktion verwenden, um unsere for-Schleife zu verbessern? Um die Arbeitsschritte mit mehreren Liedern auszuführen, sähe unser Code so aus: lyrics_gc &lt;- &quot;My mind won&#39;t let me rest Voice in my head I hear what it said I can&#39;t trust a thing If I picked up and left How fast did you forget? Resting while I&#39;m inside your presence I don&#39;t want to think nothing bad This time I won&#39;t This time I won&#39;t&quot; lyrics_gc_vec&lt;- strsplit(lyrics_gc, &quot; &quot;)[[1]] lyrics_gc_freq &lt;- c() for (word in lyrics_gc_vec) { if (!(word %in% names(lyrics_gc_freq))) { lyrics_gc_freq[word] &lt;- 1 } else { lyrics_gc_freq[word] &lt;- lyrics_gc_freq[word] + 1 } } print(lyrics_gc_freq) lyrics_dd &lt;- &quot;I&#39;m dreamin&#39;, ay Truth be told I got the hardest ahead, yeah But I said I never let it get to my head I be in space, in a daze, while you tellin me things I see your face but I never really heard you say it Red light, green light, either I&#39;ma go New place, corner store Ain&#39;t that close anymore Yeah let me get the greens, I&#39;ll be home by four If you wanna pour up, then I need me a four&quot; lyrics_dd_vec &lt;- strsplit(lyrics_dd, &quot; &quot;)[[1]] lyrics_dd_freq &lt;- c() for (word in lyrics_dd_vec) { if (!(word %in% names(lyrics_dd_freq))) { lyrics_dd_freq[word] &lt;- 1 } else { lyrics_dd_freq[word] &lt;- lyrics_dd_freq[word] + 1 } } print(lyrics_dd_freq) In der Lösung oben haben wir die for-Schleife einfach kopiert und manuell die Variable lyrics_gc durch die Variable lyrics_dd ersetzt. Das geht bei zwei verschiedenen Liedtexten zwar noch, aber was, wenn wir drei, fünf oder zehn verschiedene Liedtexte haben? Dann produzieren wir extrem viel unnötigen und unübersichtlichen Code, der vielleicht auch noch drei, fünf oder zehnmal denselben Fehler enthält. Eine bessere Lösung ist deswegen hier die Verwendung einer Funktion: die for-Schleife kann damit für alle Liedtexte, die in R als character repräsentiert werden, verallgemeinert werden: lyrics_to_frequencies &lt;- function(lyrics) { lyrics_vec &lt;- strsplit(lyrics, &quot; &quot;)[[1]] lyrics_freq &lt;- c() for (word in lyrics_vec) { if (!(word %in% names(lyrics_freq))) { lyrics_freq[word] &lt;- 1 } else { lyrics_freq[word] &lt;- lyrics_freq[word] + 1 } } return(lyrics_freq) } Die Funktion kann dann mit wechselndem Input aufgerufen werden: lyrics_gc &lt;- &quot;My mind won&#39;t let me rest Voice in my head I hear what it said I can&#39;t trust a thing If I picked up and left How fast did you forget? Resting while I&#39;m inside your presence I don&#39;t want to think nothing bad This time I won&#39;t This time I won&#39;t&quot; lyrics_dd &lt;- &quot;I&#39;m dreamin&#39;, ay Truth be told I got the hardest ahead, yeah But I said I never let it get to my head I be in space, in a daze, while you tellin me things I see your face but I never really heard you say it Red light, green light, either I&#39;ma go New place, corner store Ain&#39;t that close anymore Yeah let me get the greens, I&#39;ll be home by four If you wanna pour up, then I need me a four&quot; lyrics_gc_freq &lt;- lyrics_to_frequencies(lyrics_gc) lyrics_dd_freq &lt;- lyrics_to_frequencies(lyrics_dd) print(lyrics_gc_freq) ## My mind won&#39;t let me rest Voice in ## 1 1 3 1 1 1 1 1 ## my head I hear what it said can&#39;t ## 1 1 6 1 1 1 1 1 ## trust a thing If picked up and left ## 1 1 1 1 1 1 1 1 ## How fast did you forget? Resting while I&#39;m ## 1 1 1 1 1 1 1 1 ## inside your presence don&#39;t want to think nothing ## 1 1 1 1 1 1 1 1 ## bad This time ## 1 2 2 print(lyrics_dd_freq) ## I&#39;m dreamin&#39;, ay Truth be told I got ## 1 1 1 1 3 1 7 1 ## the hardest ahead, yeah But said never let ## 2 1 1 1 1 1 2 2 ## it get to my head in space, a ## 2 2 1 1 1 2 1 2 ## daze, while you tellin me things see your ## 1 1 3 1 3 1 1 1 ## face but really heard say Red light, green ## 1 1 1 1 1 1 2 1 ## either I&#39;ma go New place, corner store Ain&#39;t ## 1 1 1 1 1 1 1 1 ## that close anymore Yeah greens, I&#39;ll home by ## 1 1 1 1 1 1 1 1 ## four If wanna pour up, then need ## 2 1 1 1 1 1 1 Verständnisfrage: Angenommen, wir wollen die Funktion lyrics_to_frequencies() auf 20 verschiedene Liedtexte anwenden. Dann würden wir den Funktionsaufruf zwanzig Mal kopieren. Dieses Vorgehen ist nicht schön, denn so können sich wieder Fehler einschleichen. Wie könnte man das Problem lösen? Welches Vorgehen wäre eleganter? 4.7 Schleifen ersetzen mithilfe von Funktionen Am Ende der letzten Einheit habe ich bereits darauf hingewiesen, dass Schleifen in R viel weniger verwendet werden als in anderen Programmiersprachen. Das liegt daran, dass Schleifen in R oft durch Funktionen ersetzt werden, die im Allgemeinen effizienter sind als Schleifen. Das Prinzip, das das ermöglicht, haben wir bereits kennengelernt: Es heißt “Vektorisierung” und beschreibt einen Mechanismus, bei dem Operationen direkt auf alle Elemente eines Vektors angewandt weren. Vektorisierte Funktionen Man sagt, dass eine Funktion “vektorisiert” ist, wenn eine Funktion in der Lage ist, direkt einen Vektor oder ein Objekt mit einer anderen Datenstruktur zu bearbeiten. Anders formuliert: Vektorisierte Funktionen können elementweise Operationen auf Vektoren durchführen. Solche Funktionen nehmen einen Vektor oder eben eine andere Datenstruktur als Argumente an und geben als Rückgabewert oft ein Objekt mit derselben Datenstruktur zurück. Tatsächlich haben wir bereits eine Funktion kennengelernt, welche auf Vektorisierung zurückgreift, um genau das zu machen, was wir in unserem Beispiel mit den Liedtexten mühsam mithilfe einer for-Schleife und später mithilfe unserer selbst definierten Funktion lyrics_to_frequencies() erreicht haben: die table()-Funktion. lyrics &lt;- &quot;My mind won&#39;t let me rest Voice in my head I hear what it said I can&#39;t trust a thing If I picked up and left How fast did you forget? Resting while I&#39;m inside your presence I don&#39;t want to think nothing bad This time I won&#39;t This time I won&#39;t&quot; lyrics_vec &lt;- strsplit(lyrics, &quot; &quot;)[[1]] lyrics_freq &lt;- table(lyrics_vec) print(lyrics_freq) ## lyrics_vec ## a and bad can&#39;t did don&#39;t fast forget? ## 1 1 1 1 1 1 1 1 ## head hear How I I&#39;m If in inside ## 1 1 1 6 1 1 1 1 ## it left let me mind my My nothing ## 1 1 1 1 1 1 1 1 ## picked presence rest Resting said thing think This ## 1 1 1 1 1 1 1 2 ## time to trust up Voice want what while ## 2 1 1 1 1 1 1 1 ## won&#39;t you your ## 3 1 1 Zur Erinnerung: Die table()-Funktion wandelt ihr Argument zunächst automatisch in einen Faktor um und erstellt daraus eine Häufigkeitstabelle. Auch andere for-Schleifen aus der letzten Stunde können durch eine Funktion ersetzt werden. Am Ende der letzten Stunde haben wir uns beispielsweise die folgende for-Schleife angesehen, welche eine Änderung an den Elementen eines Vektors tiere vornimmt und die geänderten Werte einem neuen Vektor tiere_neu zuweist: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) tiere_neu &lt;- c() # leeren Vektor erstellen for (i in seq_along(tiere)) { tier &lt;- tiere[i] if (tier == &quot;Hund&quot;) { tier &lt;- tolower(tier) } else { tier &lt;- toupper(tier) } # Wert der Variable tier als neues Element dem Vektor tiere_neu hinzufügen tiere_neu &lt;- c(tiere_neu, tier) } print(tiere_neu) ## [1] &quot;hund&quot; &quot;ELEFANT&quot; &quot;IGEL&quot; &quot;KATZE&quot; Dasselbe kann mithilfe der Funktion ifelse() in einer einzigen Zeile erreicht werden: tiere &lt;- c(&quot;Hund&quot;, &quot;Elefant&quot;, &quot;Igel&quot;, &quot;Katze&quot;) tiere_neu &lt;- ifelse(tiere == &quot;Hund&quot;, tolower(tiere), toupper(tiere)) Die Funktion ifelse() greift genau wie die table()-Funktion unter der Motorhaube auf Vektorisierung zurück: Wenn der Ausdruck tiere == \"Hund\" ausgewertet wird, wird ein Vektor erstellt, dessen Elemente den Wert TRUE für jedes Element im Vektor tiere, das dem Wert \"Hund\" entspricht, hat, und FALSE sonst. Der zweite Parameter der Funktion ifelse, in unserem Fall tolower(tiere), legt fest, was mit den Elementen, für die Vergleichsoperation zu TRUE evaluiert wurde, passieren soll. Der dritte Parameter (toupper(tiere)) legt fest, was mit den Elementen, die zu FALSE ausgewertet wurden, passieren soll. Auch unsere for-Schleife zur Erstellung eines Vektors mit langen Wörtern können wir ersetzen, indem wir die Funktion nchar() vektorisiert wird, also indem ihr ein Vektor als Argument übergeben wird. Anstelle mithilfe einer if-Anweisung zu überprüfen, ob die Zeichenanzahl eines Wortes im Vektor woerter größer als 20 ist, wird die Funktion which() verwendet. Diese Funktion kann ebenfalls vektorisiert werden, also mit einem Vektor als Argument aufgerufen werden. Ihr Rückgabewert ist ein Vektor mit den Indizes der Elemente, für die der Ausdruck wortlaengen &gt; 20 zu TRUE evaluiert wurde. woerter &lt;- c(&quot;Netzwerkdurchsetzungsgesetz&quot;, &quot;Abfallverzeichnisverordnung&quot;, &quot;Haftpflichtversicherung&quot;, &quot;Antivirenprogramm&quot;) wortlaengen &lt;- nchar(woerter) indizes &lt;- which(wortlaengen &gt; 20) lange_woerter &lt;- wortlaengen[indizes] names(lange_woerter) &lt;- woerter[indizes] lange_woerter ## Netzwerkdurchsetzungsgesetz Abfallverzeichnisverordnung ## 27 27 ## Haftpflichtversicherung ## 23 Pro Tipp Viele Funktionen nehmen nicht nur Vektoren als Argumente an, sondern auch Listen oder andere Datenstrukturen. Welchen Datentyp oder welche Datenstruktur ein Objekt haben muss, damit eine Funktion auf das Objekt angewendet werden kann, erfahrt ihr in der Funktionsdokumentation unter “Arguments” in den R Hilfeseiten. Die Möglichkeit, in vielen Fällen for-Schleifen durch Funktionen, die Vektoren oder andere Datenstrukturen als Argumente annehmen, zu ersetzen, macht R Code häufig kürzer und in vielen Fällen auch effizienter als zum Beispiel Python Code. Am Anfang kann dieser Vorteil aber vor allem verwirren. Deswegen ist es besonders am Anfang komplett in Ordnung und sogar empfehlenswert, erst einmal Schleifen zu verwenden, und diese erst später durch eine geeignete Funktion auszutauschen. Durch das Erstellen der Schleife könnt ihr euch besser in die Aufgabe und die notwendigen Verarbeitungsschritte zur Lösung der Aufgabe eindenken. 4.7.1 Die Apply-Funktionen Nicht jede Funktion kann allerdings vektorisiert werden, also nicht jede Funktion nimmt einen Vektor oder eine andere Datenstruktur als Argument an. In diesem Fall können spezielle Funktionen verwendet werden, die eine andere Funktion und einen Vektor oder eine Liste als Argument annehmen und diese Funktion auf jedes Element des Vektors (oder der Liste) anwenden. Diese Funktionen heißen lapply(), sapply(), vapply() und mapply(). Verständnisfrage: Was ist der Unterschied zwischen den verschiedenen Apply-Funktionen? Sucht nach den Funktionen in den R-Hilfeseiten und vergleicht Argumente und Rückgabewerte der Funktionen. Ein Beispiel: Angenommen, wir hätten die folgende (fragwürdige) Funktion definiert, die erkennen soll, ob eine Stadt in Deutschland eine Großstadt ist und eine entsprechende Nachricht zurückgibt. ist_grossstadt &lt;- function(stadt) { grossstaedte &lt;- c(&quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;Frankfurt&quot;, &quot;München&quot;) if (stadt %in% grossstaedte) { return(paste(stadt, &quot;ist eine Großstadt&quot;)) } else { return(paste(stadt, &quot;ist keine Großstadt&quot;)) } } Die Funktion ist etwas gestellt so definiert, dass sie nur auf einzelne Zeichenketten angewandt werden kann, nicht auf character-Vektoren. Beim Versuch, die Funktion mit einem Vektor als Argument auszuführen, wird eine Fehlermeldung ausgegeben. ist_grossstadt(c(&quot;Berlin&quot;, &quot;Bremen&quot;)) # produziert Fehlermeldung ## Error in if (stadt %in% grossstaedte) {: the condition has length &gt; 1 ist_grossstadt(&quot;Berlin&quot;) ## [1] &quot;Berlin ist eine Großstadt&quot; Um die Funktion trotzdem auf einen Vektor anzuwenden, kann die Funktion lapply() eingesetzt werden: lapply(c(&quot;Berlin&quot;, &quot;Bremen&quot;), ist_grossstadt) ## [[1]] ## [1] &quot;Berlin ist eine Großstadt&quot; ## ## [[2]] ## [1] &quot;Bremen ist keine Großstadt&quot; Im Fall unserer Beispielfunktion ist_grosstadt() wäre es natürlich auch möglich (und eleganter), die Funktion direkt so zu definieren, dass sie auch auf Vektoren angewandt werden kann. Dabei wird die Funktion außerdem so umgeschrieben, dass Wahrheitswerte statt Textnachrichten ausgegeben werden. Das hat den zusätzlichen Vorteil, dass das Ergebnis der Überprüfung flexibel weiterverwendet werden kann. ist_grossstadt &lt;- function(stadt) { grossstaedte &lt;- c(&quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;Frankfurt&quot;, &quot;München&quot;) return(stadt %in% grossstaedte) } ist_grossstadt(c(&quot;Berlin&quot;, &quot;Bremen&quot;)) ## [1] TRUE FALSE Verständnisfrage: Warum kann die Funktion ist_grossstadt() auch auf Vektoren angewandt werden, wenn der Ausdruck stadt %in% grossstaedte außerhalb einer if-Anweisung evaluiert wird? Was ist anders, wenn der Ausdruck Teil einer if-Anweisung ist? 4.8 Gültigkeit der Funktionsargumente überprüfen In den Beispielfunktionen, die wir uns bisher angesehen haben, haben wir immer angenommen, dass ein gültiger Wert als Argument übergeben wird. Beim Versuch, die ist_grossstadt()-Funktion auf einen Vektor anzuwenden haben wir aber gesehen, dass beim Ausführen einer Funktion mit ungültigen Argumenten Fehler entstehen können. Deswegen ist es oft sinnvoll, im Funktionskörper zu überprüfen, ob die gewählten Argumente gültig sind. Wenn dies nicht der Fall ist, kann eine spezielle Funktion mit dem Namen stop() verwendet werden, um die Ausführung der Funktion abzubrechen und eine Fehlermeldung auszugeben: ist_grossstadt &lt;- function(stadt) { if (!is.character(stadt)) { stop(&quot;Das Argument &#39;stadt&#39; muss ein Charaktervektor sein.&quot;) } grossstaedte &lt;- c(&quot;Berlin&quot;, &quot;Hamburg&quot;, &quot;Frankfurt&quot;, &quot;München&quot;) return(stadt %in% grossstaedte) } ist_grossstadt(c(1, 2)) ## Error in ist_grossstadt(c(1, 2)): Das Argument &#39;stadt&#39; muss ein Charaktervektor sein. 4.9 Funktionsumgebung und Sichtbarkeitsbereich von Variablen Wenn wir Variablen erstellt haben, sind wir immer davon ausgegangen, dass diese im gesammten Programm mithilfe des Namens abrufbar sind. Wenn wir selbst eine Funktion definieren, und dabei eine Variable erstellen, dann ist die Variable im restlichen Programm jedoch im Normalfall nicht abrufbar, sie “existiert” sozusagen nur in der Funktion und ist im restlichen Programm nicht sichtbar. Ein Beispiel: x &lt;- 1 y &lt;- 2 beispiel &lt;- function() { x &lt;- 4 y &lt;- 5 return(c(x, y)) } Beim Funktionsaufruf werden die Variablen x und y aus dem Funktionskörper zurückgegeben: beispiel() ## [1] 4 5 Aber die Variablen x und y aus dem Funktionskörper können nicht unabhängig von der Funktion abgerufen werden. Sie existieren nur in der Funktion selbst: print(c(x, y)) ## [1] 1 2 Für Variablen, die innerhalb einer Funktion definiert sind, sagt man deswegen auch “lokale Variablen” und für Variablen, die außerhalb von Funktionen definiert sind, “globale Variablen”. Aber Achtung: Wenn im Funktionskörper eine Variable verwendet wird, für die im Funktionskörper oder beim Funktionsaufruf kein Wert festgelegt wird, dann wird beim Funktionsaufruf außerhalb der Funktion nach dieser Variable gesucht: x &lt;- 2 beispiel &lt;- function() { y &lt;- 1 return(c(x, y)) } beispiel() ## [1] 2 1 Der Bereich “außerhalb der Funktion” ist im Grunde genau das, was wir eingangs “Funktionsumgebung” genannt haben. In diesem Beispiel wird in der Funktionsdefinition nur eine lokale Variable y definiert. Wenn die Funktion beispiel() später aufgerufen wird, sucht R nach einer Definition für x. Da in der Funktion keine lokale Variable x definiert wurde, sucht R in der Funktionsumgebung (die in diesem Fall die globale Umgebung ist, wo die Funktion definiert wurde) und findet die globale Variable x. Wenn der Wert der Variable x sich im Programmverlauf ändert, dann wird beim Funktionsaufruf der Wert eingesetzt, den die Variable zum Zeitpunkt des Funktionsaufrufs angenommen hat: x &lt;- 4 beispiel() ## [1] 4 1 x &lt;- 6 beispiel() ## [1] 6 1 4.10 Was sind Pakete? “An R package is a collection of functions, data, and documentation that extends the capabilities of base R.” (Wickham 2017) Mit “base R” sind alle in R vordefinierten Funktionen, Datentypen und -strukturen, Operatoren, etc. gemeint. Pakete (engl. Packages) werden also verwendet, um auf bestimmte Funktionalitäten zuzugreifen, die in R nicht vordefiniert sind und die andere R-Nutzer:innen definiert und veröffentlicht haben. Um darauf zuzugreifen, müssen R Pakete zuerst installiert und danach geladen werden. Die Funktionen, die wir bisher kennengelernt haben, waren alle in R vordefiniert. Wir mussten deswegen kein Paket installieren und laden, um sie zu nutzen. In den R Dokumentationsseiten kann man in R vordefinierte Funktionen daran erkennen, dass neben dem Funktionsnamen in der linken oberen Ecke der Dokumentationsseite das Wort “base” steht. Das steht für “base R”, es handelt sich also um eine R-Basisfunktion. Bei Funktionen aus Paketen steht dort entsprechend der Paketname. Paketname auf einer R Dokumentationsseite: “base” steht für alle in R vordefinierten Funktionen 4.11 Pakete installieren R Pakete können mithilfe der Funktion install.packages() installiert werden. Die Funktion nimmt entweder einen einzelnen Paketnamen als Argument oder einen character-Vektor, der mehrere Paketnamen enthält. # Paket installieren install.packages(&quot;quanteda&quot;) # mehrere Pakete gleichzeitig installieren install.packages(c(&quot;quanteda&quot;, &quot;readtext&quot;)) Achtung: Manchmal wird auf der Konsole (RStudio Fenster R Console) bei der Installation von Paketen eine Meldung der Art “Do you want to install from sources the package which needs compilation? (Yes/no/cancel)” ausgegeben. In diesem Fall müsst ihr einfach no eingeben und auf Enter drücken. 4.12 Pakete laden Installierte Pakete müssen immer am Anfang eines R Skripts geladen werden, bevor sie verwendet werden können: library(quanteda) library(readtext) Wenn nur eine einzige oder einige wenige Funktionen aus einem Paket benötigt werden, können diese auch augerufen werden, ohne dass direkt das gesamte Paket geladen wird: quanteda::tokens(&quot;Guten Morgen&quot;) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;Guten&quot; &quot;Morgen&quot; Die Angabe des Namens des Pakets beim Aufruf von Funktionen aus Paketen erleichtert dabei außerdem, zwischen R base-Funktionen und Funktionen aus Paketen zu unterscheiden und stellt sicher, dass bei mehreren geladenen Paketen nicht versehentlich eine gleichnamige Funktion aus einem anderen Paket aufgerufen wird. 4.13 Wozu werden Pakete verwendet? R Pakete werden wir im Rahmen dieses Seminars vor allem dazu verwenden, um auf zusätzliche Funktionen zuzugreifen, die in R nicht vordefiniert sind, die also nicht zu den R-Basisfunktionen gehören. Das Paket quanteda, das wir vorhin installiert haben, bietet zum Beispiel eine Funktion, die character, die aus mehreren Wörtern bestehen, automatisch in sogenannte Tokens umwandelt (was das ist, lernen wir in der Sitzung zur Textanalyse): lyrics &lt;- &quot;My mind won&#39;t let me rest Voice in my head I hear what it said I can&#39;t trust a thing If I picked up and left How fast did you forget? Resting while I&#39;m inside your presence I don&#39;t want to think nothing bad This time I won&#39;t This time I won&#39;t&quot; # Aufruf der Funktion tokens() aus dem Paket quanteda lyrics_toks &lt;- quanteda::tokens(lyrics) print(lyrics_toks) ## Tokens consisting of 1 document. ## text1 : ## [1] &quot;My&quot; &quot;mind&quot; &quot;won&#39;t&quot; &quot;let&quot; &quot;me&quot; &quot;rest&quot; ## [7] &quot;Voice&quot; &quot;in&quot; &quot;my&quot; &quot;head&quot; &quot;I&quot; &quot;hear&quot; ## [13] &quot;what&quot; &quot;it&quot; &quot;said&quot; &quot;I&quot; &quot;can&#39;t&quot; &quot;trust&quot; ## [19] &quot;a&quot; &quot;thing&quot; &quot;If&quot; &quot;I&quot; &quot;picked&quot; &quot;up&quot; ## [25] &quot;and&quot; &quot;left&quot; &quot;How&quot; &quot;fast&quot; &quot;did&quot; &quot;you&quot; ## [31] &quot;forget&quot; &quot;?&quot; &quot;Resting&quot; &quot;while&quot; &quot;I&#39;m&quot; &quot;inside&quot; ## [37] &quot;your&quot; &quot;presence&quot; &quot;I&quot; &quot;don&#39;t&quot; &quot;want&quot; &quot;to&quot; ## [43] &quot;think&quot; &quot;nothing&quot; &quot;bad&quot; &quot;This&quot; &quot;time&quot; &quot;I&quot; ## [49] &quot;won&#39;t&quot; &quot;This&quot; &quot;time&quot; &quot;I&quot; &quot;won&#39;t&quot; Verständnisfrage: Im Kapitel 4.5 haben wir die Funktion strsplit() verwendet, um den Songtext lyrics in seine Bestandteile aufzuteilen. Dabei haben wir das Leerzeichen als Trennzeichen zwischen den Wörtern festgelegt. Dadurch wurden Satzzeichen allerdings nicht als einzelne Zeichen erkannt, zum Beispiel bei “forget?”. Wie teilt die Funktion tokens() den Songtext auf? Welche Bestandteile werden dabei erkannt? Pakete können aber zum Beispiel auch zusätzliche Datenstrukturen enthalten. Die quanteda-tokens()-Funktion, die wir gerade ausgetestet haben, erstellt beispielsweise ein sogenanntes “tokens”-Objekt (schauen wir uns noch an): typeof(lyrics_toks) ## [1] &quot;list&quot; class(lyrics_toks) ## [1] &quot;tokens&quot; Ein Paket, das keine zusätzliche Datenstruktur, sondern einen zusätzlichen Operator zur Verfügung stellt, ist daneben das Paket magrittr. Dieses Paket ermöglicht es, den sogenannten Pipe-Operator zu verwenden. Der Pipe-Operator kann verwendet werden, um mehrere Funktionsaufrufe miteinander zu verketten. Wenn dasselbe Objekt nacheinander durch verschiedene Funktionen bearbeitet wird, wäre ohne den Pipe-Operator entweder eine Folge von Anweisungen der folgenden Art notwendig: greeting &lt;- &quot;Guten Tag&quot; greeting &lt;- paste0(greeting, &quot;!&quot;) greeting_toks &lt;- strsplit(greeting, &quot; &quot;) Oder verschachtelte Funktionsaufrufe der Art: greeting &lt;- &quot;Guten Tag&quot; greeting_toks &lt;- strsplit(paste0(greeting, &quot;!&quot;), &quot; &quot;) Mit dem Pipe-Operator können solche aufeinanderfolgenden oder verschachtelten Funktionsaufrufe vereinfacht werden. Um den Operator zu verwenden, muss zunächst das Paket magrittr installiert und geladen werden: install.packages(&quot;magrittr&quot;) library(magrittr) Jetzt kann der Pipe-Operator verwendet werden: greeting &lt;- &quot;Guten Tag&quot; greeting_toks &lt;- greeting %&gt;% paste0(&quot;!&quot;) %&gt;% strsplit(&quot; &quot;) Der Ausdruck x %&gt;% f ist also äquivalent zu f(x). Der Pipe-Operator ist in R sehr weit verbreitet und wir werden immer wieder darauf zurückgreifen. Ihr solltet euch erst einmal nur merken, dass der Pipe-Operator ein zusätzlicher Operator ist, der ermöglicht, Funktionsaufrufe zu verketten. Das Tidyverse Verschiedene R Pakete folgen verschiedenen Philosophien oder Designprinzipien, wie guter Code aussehen sollte, und welche Datenstrukturen für welche Aufgaben verwendet werden sollten. Deswegen sind Pakete, die denselben Prinzipien folgen und dieselben Datenstrukturen verwenden untereinander kompatibler und Code, der mithilfe von Funktionen aus verschiedenen Paketen geschrieben ist, unterscheidet sich mitunter stark von Code, der nur R-Basisfunktionen nutzt. Das sogenannte Tidyverse ist eine Sammlung von R Paketen, die alle denselben Designprinzipien folgen und dieselben Datenstrukturen verwenden. Auch das Paket magrittr ist Teil des Tidyverse. Innerhalb des Tidyverse wird stets der Pipe-Operator verwendet, um Funktionsaufrufe zu verketten, und es gibt für viele R Base Funktionen eigene Tidyverse-Funktionen, die dasselbe machen, aber auf eine Weise, die mit den Prinzipien des Tidyverse übereinstimmt. Beispielsweise gibt es im Tidyverse anstelle der apply-Funktionen eine Reihe von Tidyverse-Funktionen, die genau wie die apply-Funktionen nicht vektorisierte Funktionen vektorisieren (die map-Funktionen). Wir werden in diesem Seminar nicht das gesamte Tidyverse behandeln, aber später werden wir die beiden Tidyverse-Pakete ggplot2 und stringr kennenlernen. Zuletzt solltet ihr wissen, dass manche Pakete sogar komplette Datensätze oder Korpora (lernen wir noch) enthalten, die zusammen mit dem Rest des Pakets heruntergeladen werden. Quanteda stellt beispielsweise zu Testzwecken ein komplettes Korpus aus Reden von US-Präsidenten zur Verfügung: # Einen Datensatz kann man laden, indem man einfach den Namen des Datensatzes eingibt. Die Funktion head() gibt die ersten fünf Zeilen eines Dataframes aus. Die Funktion summary() gibt einen Dataframe mit Metadaten zu einem bestimmten Objekt zurück. Wenn Funktionsaufrufe verschachtelt werden, wird immer zuerst die innere Funktion ausgeführt, und dann die äußere. head(summary(quanteda::data_corpus_inaugural)) ## Text Types Tokens Sentences Year President FirstName ## 1 1789-Washington 625 1537 23 1789 Washington George ## 2 1793-Washington 96 147 4 1793 Washington George ## 3 1797-Adams 826 2577 37 1797 Adams John ## 4 1801-Jefferson 717 1923 41 1801 Jefferson Thomas ## 5 1805-Jefferson 804 2380 45 1805 Jefferson Thomas ## 6 1809-Madison 535 1261 21 1809 Madison James ## Party ## 1 none ## 2 none ## 3 Federalist ## 4 Democratic-Republican ## 5 Democratic-Republican ## 6 Democratic-Republican 4.14 Welche Pakete gibt es denn alles? Wenn ihr nach einer bestimmten Funktionalität sucht, dann empfiehlt es sich, zunächst auf der Seite https://rdrr.io/ nach einem Stichwort zu suchen. Diese Seite durchsucht verschiedene Online-Plattformen, auf denen R Nutzer:innen ihre Pakete veröffentlicht haben. Die offizielle Veröffentlichungsplattform für R Pakete heißt CRAN. Die Funktion install.packages() installiert deswegen per Default nur Pakete, die über CRAN veröffentlicht wurden. Wir haben ja vorhin eine Funktion increment_value() definiert, die zu einer beliebigen Zahl 1 addiert. Diese Operation nennt man auch “Inkrementieren”. Das Inkrementieren ist eine Operation, die sehr viele Menschen sehr oft verwenden. Wir können uns deswegen sicher sein, dass schon ein:e ander:e R Nutzer:in diese Funktion definiert hat und im Rahmen von einem R Paket veröffentlicht hat. Und tatsächlich: Wenn wir auf https://rdrr.io/ nach “increment” suchen, werden direkt mehrere Pakete vorgeschlagen, die eine “increment”-Funktion enthalten. Es haben also schon einige R Nutzer:innen Inkrementierungsfunktionen definiert und im Rahmen von Paketen anderen Nutzer:innen bereitgestellt. Die increment_value()-Funktion von vorhin würden wir also in der Praxis eigentlich nicht selbst defnieren, sondern stattdessen aus einem Paket installieren. Zu den meisten Paketen gibt es eigene Dokumentationsseiten, die von den R Nutzer:innen gepflegt werden, die die Pakete entwickelt haben. Um zu verstehen, welche Funktionalitäten ein bestimmtes Paket zur Verfügung stellt, solltet ihr euch die Dokumentationsseiten zu dem Paket durchlesen. Dokumentationsseiten zum Paket quanteda: https://quanteda.io/ Dokumentationsseiten zum Paket magrittr: https://magrittr.tidyverse.org/ Unter dem Menüpunkt “Reference” auf den quanteda-Seiten findet ihr zum Beispiel eine Liste aller Datensätze und Funktionen, welche das Paket zur Verfügung stellt. Dependencies Fast alle R Pakete nutzen selbst Funktionen aus anderen Paketen. Zum Beispiel gibt es auch außerhalb des Tidyverse Pakete, welche in ihren Funktionsdefinitionen den Pipe-Operator verwenden und dazu auf das magrittr-Paket zurückgreifen. Wenn ein Paket A auf Funktionalitäten aus einem anderen Paket B zurückgreift, dann nennt man das Paket B eine “Dependency” von Paket A. Wenn ihr ein Paket installiert, wird deswegen oft automatisch eine Reihe weiterer Pakete installiert. Das sind die Dependencies des Pakets, das ihr installieren wollt. Quellen Venables, W.N. and Smith, D.M. and the R Core Team. An Introduction to R, https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf Wickham, Hadley. The Tidyverse Style Guide, https://style.tidyverse.org/ Riepl, Wolf. R-Code beschleunigen: Schleifen vs. Vektorisierung vs. Lookup-Tables, https://statistik-dresden.de/archives/15332 Wickham, Hadley and Grolemund, Garrett (2017). R for Data Science: Functions, https://r4ds.had.co.nz/functions.html Wickham, Hadley. Advanced R. Chapter 6: Functions. Function Components, https://adv-r.hadley.nz/functions.html#fun-components Wickham, Hadley. Advanced R. Chapter 6: Functions. Lexical Scoping, https://adv-r.hadley.nz/functions.html#lexical-scoping Wickham, Hadley and Grolemund, Garrett (2017). R for Data Science: Iteration. The Map Functions, https://r4ds.had.co.nz/iteration.html#the-map-functions Wickham, Hadley (2019). Advanced R. Ch. 7.4.2: The Function Environment, https://adv-r.hadley.nz/environments.html#function-environments Benoit, Kenneth and Watanabe, Kohei. Quanteda 4.0.0: Reference, https://quanteda.io/reference/index.html Benoit, Kenneth and Watanabe, Kohei. Quanteda: Quantitative Analysis of Textual Data, https://quanteda.io Wickham, Hadley and Grolemund, Garrett (2017). R for Data Science: Pipes, https://r4ds.had.co.nz/pipes.html Bache, Stefan Milton and Wickham, Hadley. Magrittr 2.0.3 Dokumentation, https://magrittr.tidyverse.org/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
